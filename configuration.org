#+title: Configuration
#+date: [2023-08-15 Tue]
#+author: Jackson Brough

* Flake

#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "Are these your configuration files, Larry?";

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";

    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    emacs-overlay.url = "github:nix-community/emacs-overlay";
    emacs-overlay.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = { self, nixpkgs, home-manager, emacs-overlay }:
    rec {
      nixosModules = rec {
        <<modules>>
      };
      <<systems>>
      <<templates>>
    };
}
#+end_src

* Modules
:PROPERTIES:
:header-args: :noweb-ref modules
:END:

** Personal information

#+begin_src nix
personal = { lib, ... }:

  {
    options.personal = lib.mkOption {
      type = lib.types.attrs;
      default = {
        userName = "jackson";
        fullName = "Jackson Brough";
        email = "jacksontbrough@gmail.com";
        devices = {
          kenobi = {
            ssh = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBndIK51b/o6aSjuTdoa8emnpCRg0s5y68oXAFR66D4/ jacksontbrough@gmail.com";
            syncthing = "7MDSHYK-QQSLKTX-LDA4VKP-EJASTEQ-V5JUGRT-ZRCNC7K-BFK6KQR-GAZ4JQV";
          };
          share1 = {
            ssh = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFpnGMEUElcwgnuHpBXQa4xotZrRdT6VC/7b9n5TykXZ root@share1";
            syncthing = "CQ6ZTVZ-PWRWMW2-2BTFJ7V-XSMIHHU-VS4JIPD-HI3ALDJ-FH6HW5L-Z3WDIAX";
            hostName = "share1.tail662f8.ts.net";
          };
          jackson-broughs-iphone = {
            syncthing = "64BJT3J-XFGZYTG-TMJXAS5-4XACLPE-JUF6XHS-5G4DFYW-2QVAC4T-LLRKUAL";
          };
        };
      };
    };
  };
#+end_src

** Package manager configuration
Make Nix can flakes.

#+begin_src nix
packageManager = { pkgs, ... }:

  {
    nix.package = pkgs.nix;
    nix.settings.experimental-features = [ "nix-command" "flakes" ];
    nixpkgs.config.allowUnfree = true;
  };
#+end_src

** murph

#+begin_src nix
murphHardware = { config, pkgs, lib, ... }:

  {
    hardware.enableRedistributableFirmware = lib.mkDefault true;
    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

    system.stateVersion = "23.11";

    boot = {
      initrd.availableKernelModules = [ "nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod" ];
      initrd.kernelModules = [ ];
      kernelPackages = pkgs.linuxPackages_latest;
      kernelModules = [ "kvm-amd" ];
      extraModulePackages = [ ];
      loader.systemd-boot.enable = true;
      loader.efi.canTouchEfiVariables = true;
    };

    fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/79D4-F8F1";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };
    fileSystems."/" = {
      device = "/dev/disk/by-uuid/570b2e37-fe1d-47d0-be0c-457f37d4bc3d";
      fsType = "ext4";
    };
    swapDevices = [ ];

    networking.hostName = "murph";
    networking.networkmanager.enable = true;
    networking.useDHCP = lib.mkDefault true;

    security.rtkit.enable = true;
    services.pipewire = {
      enable = true;
      pulse.enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
    };

    hardware.bluetooth.enable = true;
    services.blueman.enable = true;

    services.fprintd.enable = true;

    security.polkit.enable = true;
    hardware.graphics.enable = true;

    services.fwupd.enable = true;

    time.timeZone = "America/Denver";

    i18n.defaultLocale = "en_US.UTF-8";
    i18n.extraLocaleSettings = {
      LC_ADDRESS = "en_US.UTF-8";
      LC_IDENTIFICATION = "en_US.UTF-8";
      LC_MEASUREMENT = "en_US.UTF-8";
      LC_MONETARY = "en_US.UTF-8";
      LC_NAME = "en_US.UTF-8";
      LC_NUMERIC = "en_US.UTF-8";
      LC_PAPER = "en_US.UTF-8";
      LC_TELEPHONE = "en_US.UTF-8";
      LC_TIME = "en_US.UTF-8";
    };

    services.xserver = {
      xkb.layout = "us";
      xkb.variant = "";
    };

    # TODO: For ECE 3710 FPGA, remove when finished with the class
    services.udev.extraRules = ''
    SUBSYSTEM=="usb", ATTRS{idVendor}=="09fb", ATTRS{idProduct}=="6001", MODE="0666"
    SUBSYSTEM=="usb", ATTRS{idVendor}=="09fb", ATTRS{idProduct}=="6002", MODE="0666"
    SUBSYSTEM=="usb", ATTRS{idVendor}=="09fb", ATTRS{idProduct}=="6003", MODE="0666"

    SUBSYSTEM=="usb", ATTRS{idVendor}=="09fb", ATTRS{idProduct}=="6010", MODE="0666"
    SUBSYSTEM=="usb", ATTRS{idVendor}=="09fb", ATTRS{idProduct}=="6810", MODE="0666"
    '';
  };
#+end_src

** User Linux

#+begin_src nix
jacksonUserLinux = { config, pkgs, ... }:

  {
    nix.settings.trusted-users = [ "root" config.personal.userName ];

    environment.systemPackages = with pkgs; [ curl git neovim ];
    environment.shells = with pkgs; [ bashInteractive fish ];

    programs.fish.enable = true;

    users.users.${config.personal.userName} = {
      home = "/home/${config.personal.userName}";
      extraGroups = [ "wheel" "networkmanager" "video" "input" ];
      shell = pkgs.fish;
      isNormalUser = true;
    };

    services.openssh.enable = true;
  };
#+end_src

** Docker

#+begin_src nix
docker = { config, pkgs, ... }:

  {
    virtualisation.docker.enable = true;

    users.users.${config.personal.userName}.extraGroups = [ "docker" ];
  };
#+end_src

** Home Linux

#+begin_src nix
homeLinux = { config, pkgs, ... }:
  
  {
    home-manager.users.${config.personal.userName} = let
      homeDirectory = "/home/${config.personal.userName}";
    in {
      home.stateVersion = "23.05";
      programs.home-manager.enable = true;
      home.homeDirectory = homeDirectory;

      xdg = {
        enable = true;
        cacheHome = "${homeDirectory}/.cache";
        configHome = "${homeDirectory}/.config";
        dataHome = "${homeDirectory}/.local/share";
        stateHome = "${homeDirectory}/.local/state";
        # mimeApps = {
        #   enable = true;
        #   defaultApplications = {
        #     "application/pdf" = "firefox.desktop";
        #   };
        # };
      };

      home.packages = with pkgs; [
        direnv
        eza
        fd
        ispell
        jq
        killall
        lldb
        ripgrep
      ];
      
      programs.fish = {
        enable = true;
        interactiveShellInit = "fish_vi_key_bindings";
        shellAliases.ls = "eza --group-directories-first";
      };
      
      programs.git = {
        enable = true;
        userName = config.personal.fullName;
        userEmail = config.personal.email;
        signing.key = "1BA5F1335AB45105";
        signing.signByDefault = config.home-manager.users.${config.personal.userName}.programs.gpg.enable;
        # "Are the worker threads going to unionize?"
        extraConfig.init.defaultBranch = "main";
      };
      
      programs.ssh.enable = true;
    };
  };
#+end_src

** Linux home graphical

#+begin_src nix
homeLinuxGraphical = { config, pkgs, lib, ... }:

  {
    imports = [ dconf ];

    options = let
      homeDirectory = config.home-manager.users.${config.personal.userName}.home.homeDirectory; in
      {
        defaultDirectories.repositoriesDirectory = lib.mkOption { type = lib.types.str; default = "${homeDirectory}/repositories"; };
        defaultDirectories.localDirectory = lib.mkOption { type = lib.types.str; default = "${homeDirectory}/local"; };
        defaultDirectories.scratchDirectory = lib.mkOption { type = lib.types.str; default = "${homeDirectory}/scratch"; };
        defaultDirectories.shareDirectory = lib.mkOption { type = lib.types.str; default = "${homeDirectory}/share"; };
      };

    config = {
      services.xserver = {
        enable = true;
        displayManager.gdm.enable = true;
        displayManager.gdm.wayland = true;
        desktopManager.gnome.enable = true;
      };
      hardware.pulseaudio.enable = false;
      
      environment.gnome.excludePackages = (with pkgs; [
        gnome-photos
        gnome-tour
        gedit
        cheese
        epiphany
        evince
        geary
        totem
        gnome-calculator
        gnome-calendar
        simple-scan
        atomix
        gnome-characters
        gnome-music
        hitori
        iagno
        tali
        gnome-clocks
        gnome-contacts
        gnome-maps
        gnome-weather
      ]) ++ (with pkgs.gnome; [
        # gnome-disk-image-mounter
        # gnome-disks
        # gnome-extensions
        # gnome-extensions-app
        # gnome-logs
        # gnome-system-monitor
      ]);

      home-manager.users.${config.personal.userName} = {
        home.packages = with pkgs; [
          jetbrains-mono
          noto-fonts
          
          dconf-editor
          discord # Eww cringe, but everyone uses it for class group chats
          firefox
          slack
          spotify
          evince

          agda
          
          # TODO: Say no to globally installed tex
          (pkgs.texlive.combine {
            inherit (pkgs.texlive) scheme-basic
              dvisvgm dvipng
              wrapfig amsmath ulem hyperref capt-of
              bussproofs simplebnf tabularray mathtools;
          })
        ];
        home.sessionVariables.NIXOS_OZONE_WL = "1";
        
        xdg.userDirs = {
          createDirectories = true;
          documents = config.defaultDirectories.scratchDirectory;
          download = config.defaultDirectories.scratchDirectory;
          music = "${config.defaultDirectories.shareDirectory}/music";
          pictures = "${config.defaultDirectories.shareDirectory}/pictures";
          publicShare = config.defaultDirectories.scratchDirectory;
          templates = config.defaultDirectories.scratchDirectory;
          videos = "${config.defaultDirectories.shareDirectory}/videos";
        };
        xdg.portal = {
          enable = true;
          config = {
            common = {
              default = [
                "gtk"
              ];
            };
          };
          extraPortals = with pkgs; [
            xdg-desktop-portal-wlr
            xdg-desktop-portal-gtk
          ];
        };
        
        programs.beets = {
          enable = true;
          settings = {
            directory = "${config.defaultDirectories.shareDirectory}/music";
            import.move = true;
          };
        };

        fonts.fontconfig = {
          enable = true;
          defaultFonts.monospace = [ "JetBrains Mono" "Noto Sans Mono" ];
          defaultFonts.sansSerif = [ "Noto Sans" ];
          defaultFonts.serif = [ "Noto Serif" ];
        };

        # services.mpd = {
        # enable = true;
        # musicDirectory = "${config.defaultDirectories.shareDirectory}/music";
        # extraConfig = ''
        # audio_output {
        # type "pipewire"
        # name "pipewire"
        # }
        # '';
        # };
        
        # services.mpd-mpris.enable = true;
        # services.playerctld.enable = true;
      };
    };
  };
#+end_src

** dconf

#+begin_src nix
dconf = { config, lib, ... }:
  {
    home-manager.users.${config.personal.userName}.dconf = {
      enable = true;
      settings = {
        "org/gnome/desktop/wm/keybindings" = {
          close = [ "<Super>q" ];
          switch-to-workspace-1 = [ "<Super>1" ];
          switch-to-workspace-2 = [ "<Super>2" ];
          switch-to-workspace-3 = [ "<Super>3" ];
          switch-to-workspace-4 = [ "<Super>4" ];
          switch-to-workspace-5 = [ "<Super>5" ];
          switch-to-workspace-6 = [ "<Super>6" ];
          switch-to-workspace-7 = [ "<Super>7" ];
          switch-to-workspace-8 = [ "<Super>8" ];
          switch-to-workspace-9 = [ "<Super>9" ];
          move-to-workspace-1 = [ "<Super><Shift>1" ];
          move-to-workspace-2 = [ "<Super><Shift>2" ];
          move-to-workspace-3 = [ "<Super><Shift>3" ];
          move-to-workspace-4 = [ "<Super><Shift>4" ];
          move-to-workspace-5 = [ "<Super><Shift>5" ];
          move-to-workspace-6 = [ "<Super><Shift>6" ];
          move-to-workspace-7 = [ "<Super><Shift>7" ];
          move-to-workspace-8 = [ "<Super><Shift>8" ];
          move-to-workspace-9 = [ "<Super><Shift>9" ];
        };
        "org/gnome/desktop/wm/preferences" = {
          num-workspaces = 9;
        };
        "org/gnome/shell/keybindings" = {
          toggle-message-tray = [ ];
          focus-active-notification = [ ];
          toggle-overview = [ ];
          switch-to-application-1 = [ ];
          switch-to-application-2 = [ ];
          switch-to-application-3 = [ ];
          switch-to-application-4 = [ ];
          switch-to-application-5 = [ ];
          switch-to-application-6 = [ ];
          switch-to-application-7 = [ ];
          switch-to-application-8 = [ ];
          switch-to-application-9 = [ ];
        };
        "org/gnome/mutter/keybindings" = {
          switch-monitor = [ ];
        };
        "org/gnome/shell" = {
          disabled-user-extension = false;
          disabled-extensions = "disabled";
        };
        "org/gnome/desktop/interface" = {
          scaling-factor = home-manager.lib.hm.gvariant.mkUint32 2;
          color-scheme = "prefer-dark";
          enable-hot-cornors = false;
          clock-format = "12h";
        };
        "org/gnome/desktop/background" = {
          picture-options = "none";
          color-shading-type = "solid";
          primary-color = "#0a369d";
        };
      };
    };
  };
#+end_src

** gh

#+begin_src nix
gh = { config, pkgs, ... }:

  {
    home-manager.users.${config.personal.userName} = {
      programs.gh = {
        enable = true;
        settings.git_protocol = "ssh";
      };
    };
  };
#+end_src

** gpg

#+begin_src nix
gpg = { config, pkgs, ... }:

  {
    home-manager.users.${config.personal.userName} = {
      home.packages = with pkgs; [ pinentry-gnome3 ];
      
      services.ssh-agent.enable = pkgs.stdenv.isLinux;
      
      programs.gpg = {
        enable = true;
        homedir = let xdgDataHome = config.home-manager.users.${config.personal.userName}.xdg.dataHome;
                  in "${xdgDataHome}/gnupg";
      };
      services.gpg-agent = {
        enable = pkgs.stdenv.isLinux;
        pinentryPackage = pkgs.pinentry-gnome3;
        # https://superuser.com/questions/624343/keep-gnupg-credentials-cached-for-entire-user-session
        defaultCacheTtl = 34560000;
        maxCacheTtl = 34560000;
      };
    };
  };
#+end_src

** gopass

#+begin_src nix
gopass = { config, pkgs, ... }:

  {
    home-manager.users.${config.personal.userName} = {
      home.packages = [ pkgs.gopass ];
      
      xdg.configFile.gopass = {
        target = "gopass/config";
        text = ''
          [mounts]
          path = ${config.defaultDirectories.repositoriesDirectory}/passwords
          [recipients]
          hash = c9903be2bdd11ffec04509345292bfa567e6b28e7e6aa866933254c5d1344326
        '';
      };
    };
  };
#+end_src

** Tailscale

#+begin_src nix
tailscale = { config, ... }:
  {
    services.tailscale.enable = true;
    services.tailscale.useRoutingFeatures = "client";
  };
#+end_src

* Emacs
** Nix
:PROPERTIES:
:header-args: :noweb-ref modules
:END:

*** Overlay
This is not actually a NixOS module. I guess it doesn't matter for
now.

I guess the lean4-mode package is not on MELPA, so I had to figure out
how to add a custom emacs package using ~fetchFromGitHub~. Long story
short: always check the Nix wiki entry before anything else. It'll
usually shoot you straight. Here's what I used:

- [[https://nixos.wiki/wiki/Emacs#Adding_packages_from_outside_ELPA_.2F_MELPA]]
- [[https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/lean4-mode.20with.20nix-doom-emacs/near/291790287]]
- https://github.com/NixOS/nixpkgs/issues/191128

#+begin_src nix
emacsOverlay = (pkgs: package:
  (pkgs.emacsWithPackagesFromUsePackage {
    inherit package;
    config = ./emacs.el;
    defaultInitFile = true;
    extraEmacsPackages = epkgs: with epkgs; [
      treesit-grammars.with-all-grammars
    ];
    override = epkgs: epkgs // {
      lean4-mode = epkgs.trivialBuild rec {
        pname = "lean4-mode";
        version = "1";
        src = pkgs.fetchFromGitHub {
          owner = "bustercopley";
          repo = "lean4-mode";
          rev = "f6166f65ac3a50ba32282ccf2c883d61b5843a2b";
          sha256 = "sha256-mVZh+rP9IWLs2QiPysIuQ3uNAQsuJ63xgUY5akaJjXc=";
        };
        propagatedUserEnvPkgs = with epkgs;
          [ dash f flycheck lsp-mode magit-section s ];
        buildInputs = propagatedUserEnvPkgs;
        postInstall = ''
          DATADIR=$out/share/emacs/site-lisp/data
          mkdir $DATADIR
          install ./data/abbreviations.json $DATADIR
        '';
      };
    };
    alwaysEnsure = true;
  }));
#+end_src

*** Module

#+begin_src nix
emacsConfiguration = { config, pkgs, ... }:

  {
    nixpkgs.overlays = with emacs-overlay.overlays; [ emacs package ];

    home-manager.users.${config.personal.userName} = {
      programs.emacs = {
        enable = true;
        package = pkgs.emacsWithPackagesFromUsePackage {
          package = pkgs.emacs-unstable-pgtk;
          config = ./emacs.el;
          defaultInitFile = true;
          extraEmacsPackages = epkgs: with epkgs; [
            treesit-grammars.with-all-grammars
          ];
          override = epkgs: epkgs // {
            lean4-mode = epkgs.trivialBuild rec {
              pname = "lean4-mode";
              version = "1";
              src = pkgs.fetchFromGitHub {
                owner = "bustercopley";
                repo = "lean4-mode";
                rev = "f6166f65ac3a50ba32282ccf2c883d61b5843a2b";
                sha256 = "sha256-mVZh+rP9IWLs2QiPysIuQ3uNAQsuJ63xgUY5akaJjXc=";
              };
              propagatedUserEnvPkgs = with epkgs;
                [ dash f flycheck lsp-mode magit-section s ];
              buildInputs = propagatedUserEnvPkgs;
              postInstall = ''
                DATADIR=$out/share/emacs/site-lisp/data
                mkdir $DATADIR
                install ./data/abbreviations.json $DATADIR
              '';
            };
          };
          alwaysEnsure = true;
        };
      };
      services.emacs = {
        enable = pkgs.stdenv.isLinux;
        package = config.home-manager.users.${config.personal.userName}.programs.emacs.package;
        defaultEditor = true;
      };
    };
  };
#+end_src

** Configuration
:PROPERTIES:
:header-args: :tangle emacs.el
:END:

*** Defaults

Very first, disable the default package manager, because it sucks and
also because we're using Nix instead.

#+begin_src elisp
(setq package-enable-at-startup nil)
(setq use-package-ensure-function 'ignore)
(setq package-archives nil)
#+end_src

Require the ~bind-key~ module because ~use-package~ ~:bind~
declarations won't work without it.

#+begin_src elisp
(require 'bind-key)
#+end_src

Disable the menu-, tool-, and scroll-bar modes.

#+begin_src elisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

Set the font.

#+begin_src elisp
(set-face-attribute 'default nil :family "JetBrains Mono" :height 100)
#+end_src

Never ever make an audible noise. "The editor does not speak unless
spoken to."

#+begin_src elisp
(setq visible-bell t)
#+end_src

Get the relative line numbers; it's actually suprising how useless I feel
without them.

#+begin_src elisp
(setq display-line-numbers-type 'visual)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

Handle backups and autosaves. Autosaves are about preserving the current editing
session, and backups are about recovering previous ones.

#+begin_src elisp
(setq local-directory (expand-file-name "~/.local/data/emacs/"))
(setq backup-directory (concat local-directory "backups/"))
(setq auto-save-directory (concat local-directory "auto-saves/"))
#+end_src

See [[https://www.emacswiki.org/emacs/AutoSave]].

#+begin_src elisp
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))
#+end_src

But don't create lock files ever. That's just a fundamental design
flaw with global mutable filesystems and I don't want Emacs to try to
fix it.

#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

Set the custom file.

#+begin_src elisp
(setq custom-file (concat local-directory "custom.el"))
(load custom-file)
#+end_src

Holy cow: tabs.

#+begin_src elisp
(setq-default indent-tabs-mode nil)
#+end_src

As for ~use-package~ declarations, always remember, the ~init~ keyword
is for code that should run before, the ~config~ keyword is for code
that should run after.

#+begin_src elisp
(unless (eq system-type 'windows-nt)
  (use-package exec-path-from-shell
    :config
    (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "GNUPGHOME" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
      (add-to-list 'exec-path-from-shell-variables var))
    (exec-path-from-shell-initialize)))
#+end_src

#+begin_src elisp
;; (setq epg-pinentry-mode 'loopback)
;; (setenv "GNUPGHOME" "/home/jackson/.local/share/gnupg")
#+end_src

*** Evil mode

#+begin_src elisp
(use-package evil
 :init
 (setq evil-want-keybinding nil)
 :custom
 (evil-undo-system 'undo-redo)
 :config
 (evil-mode 1))

(use-package evil-collection
 :after evil
 :init
 (evil-collection-init))
#+end_src

*** Dired

- https://www.youtube.com/watch?v=L_4pLN0gXGI
- Dired hide details mode
- M-<p,n>! Searches back and forward in mini buffer search history!

*** Org
The bible apparently:

- [[http://doc.norang.ca/org-mode.html]]

Don't indent source blocks.

#+begin_src elisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src

The default behavior of executing source blocks in org mode source
blocks is pretty annoying, you have to confirm execution each
time. Let's disable that and list a few languages which should work
without confirmation. (I'm not actually sure that this works.)

#+begin_src elisp
(setq
 org-confirm-babel-evaluate nil
 org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)))
#+end_src

Now inline latex schenanigans. We want inline latex to be displayed
using SVGs and to render on startup, and for the svg backgrounds to
match the current theme. I also needed to include the ~bussproofs~ package to
get natural deduction proof trees once.

#+begin_src elisp
(setq
 ;; org-latex-compiler "lualatex"
 org-latex-create-formula-image-program 'dvisvgm
 org-preview-latex-image-directory temporary-file-directory
 org-latex-packages-alist '(("" "bussproofs" t) ("" "simplebnf" t))
 org-startup-with-latex-preview t
 org-startup-with-inline-images t
 )
(with-eval-after-load 'org
  (plist-put org-format-latex-options :background "Transparent")
  ;; TODO: Works for now?
  (plist-put org-format-latex-options :scale 0.5)
  )
#+end_src

I'm an auto-fill-mode advocate. Plain text is rediculous enough as it
is, I definitely don't want to have to manually indent my paragraphs
in org mode.

#+begin_src elisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

TODO: Commentary about GTD system.

#+begin_src elisp
(setq org-directory "~/repositories/gtd/")
(setq inbox-file (concat org-directory "inbox.org"))
(setq tasks-file (concat org-directory "tasks.org"))
(setq suspended-file (concat org-directory "suspended.org"))
(setq calendar-file (concat org-directory "calendar.org"))
(setq archive-file (concat org-directory "archive.org"))

(setq org-agenda-files (list tasks-file calendar-file suspended-file))
(setq org-refile-targets
      '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file)
(setq org-archive-location (concat archive-file "::"))
#+end_src

#+begin_src elisp
(setq org-tag-alist '(("next" . ?n) ("wait" . ?w)))
#+end_src

#+begin_src elisp
(setq org-capture-templates
      '(("d" "default" entry (file inbox-file)
         "* %?\n%U\n")))

(bind-key "C-c d d"
          (lambda (&optional GOTO)
            (interactive)
            (org-capture GOTO "d")))
(bind-key "C-c r t"
          (lambda ()
            (interactive)
            (org-refile nil nil (list nil tasks-file nil nil))))
(bind-key "C-c a" 'org-agenda)
#+end_src

Enable todo state changes by adding "!" to the org keywords.

#+begin_src elisp
(setq org-todo-keywords '((sequence "TODO(!)" "DONE(!)")))
(setq org-log-into-drawer t)
(setq org-log-done 'time)
#+end_src

Habits. See [[https://cpbotha.net/2019/11/02/forming-and-maintaining-habits-using-orgmode/]].

#+begin_src elisp
(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t))
#+end_src

#+begin_src elisp
(with-eval-after-load 'org
  (require 'oc-basic))
(setq org-cite-global-bibliography '("~/repositories/notes/citations.bib"))
#+end_src

#+begin_src elisp
(use-package org-roam
  :custom
  (org-roam-directory "~/repositories/notes")
  :bind
  (("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-db-autosync-mode))

(use-package org-roam-ui
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(use-package git-auto-commit-mode)
#+end_src

*** Tex

#+begin_src elisp
(use-package auctex
  :init
  (setq TeX-electric-sub-and-superscript t)
  ;; (setq TeX-view-program-selection `((output-pdf "xdg-open")))
  )

;; TODO: pdf-tools?
#+end_src

*** Completion
Dude I just copied these hip packages from wherever I first saw them
on the internet, I don't actually understand them. They look very pretty though.

#+begin_src elisp
(use-package vertico
  :init
  (vertico-mode)
  :hook ((rfn-eshadow-update-overlay . #'vertico-directory-tidy)))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-x p b" . consult-project-buffer)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ("M-s d" . consult-find)
         ("M-s g" . consult-ripgrep)))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

I suppose ~which-key~ also counts as a completion menu thing. Honestly it
should built into emacs, I would be so screwed without it.

#+begin_src elisp
(use-package which-key
  :config (which-key-mode 1))
#+end_src

There's also ~company~ and ~yasnippet~, which I've never really gone
without so I honestly couldn't say where normal emacs completion
ends and these two start.

#+begin_src elisp
(use-package company
  :custom
  (company-idle-delay 0.1)
  :bind
  (:map company-active-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous))
  :init
  (global-company-mode))
#+end_src

#+begin_src elisp
(use-package yasnippet
  :config
  (yas-reload-all)
  ;; (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src

*** Debugging

#+begin_src elisp
(use-package dap-mode
  :after lsp-mode
  :commands dap-debug
  :hook ((python-mode . dap-ui-mode)
         (python-mode . dap-mode))
  :custom
  (dap-python-debugger 'debugpy)
  :config
  (eval-when-compile
    (require 'cl))
  (require 'dap-python)
  (require 'dap-lldb))
#+end_src

*** Themes

Emacs themes: just skip to the end, discover [[https://protesilaos.com][Protesilaos Stavrou]], and
install the ~ef~ themes. Apparently he's building a hut in the Cyprus
mountains?

#+begin_src elisp
(use-package standard-themes)

(use-package modus-themes)

(use-package ef-themes
  :init
  (load-theme 'ef-dark t))
#+end_src

*** Racket

#+begin_src elisp
(use-package racket-mode)
#+end_src

*** Rust

#+begin_src elisp
(use-package rust-mode
  :hook
  ((rust-mode . eglot-ensure)
   (rust-mode . flycheck-mode))
  :config
  (setq-default eglot-workspace-configuration
                '(:rust-analyzer (:check (:command "clippy")))))
#+end_src

*** Lean

#+begin_src elisp
(use-package lean4-mode
  :mode "\\.lean\\'")
#+end_src

*** Agda

#+begin_src elisp
(load-file (let ((coding-system-for-read 'utf-8))
             (shell-command-to-string "agda-mode locate")))
#+end_src

*** Haskell

#+begin_src elisp
(use-package haskell-mode
  :hook
  ((haskell-mode . eglot-ensure)))
#+end_src

*** Verilog

Seriously the default options for Emacs verilog mode are so
annoying. Friggin 3 space indent are you serious?

#+begin_src elisp
(setq verilog-indent-level 4)
(setq verilog-case-indent 4)
(setq verilog-cexp-indent 4)
(setq verilog-indent-level-behavioral 4)
(setq verilog-indent-level-declaration 4)
(setq verilog-indent-level-module 4)
(setq verilog-indent-level-module 4)
(setq verilog-align-ifelse t)
(setq verilog-auto-delete-trailing-whitespace t)
(setq verilog-auto-newline nil)
(setq verilog-auto-lineup nil)
(setq verilog-highlight-grouping-keywords t)
(setq verilog-highlight-modules t)
;; If users feel compelled to add comments signaling the end of blocks
;; then you should change your language syntax
(setq verilog-auto-endcomments nil)
#+end_src

*** Magit

#+begin_src elisp
(use-package magit)
#+end_src

*** Nix
"Yep! Make a symlink! You’re an adult!"

#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'")

(use-package envrc
  :config
  (envrc-global-mode))

(use-package inheritenv)
#+end_src

*** Emms

#+begin_src elisp
(use-package emms
  :config
  (require 'emms-setup)
  (emms-all)
  (setq emms-source-file-default-directory (expand-file-name "~/share/music/"))
  (setq emms-player-mpd-server-name "localhost")
  (setq emms-player-mpd-server-port "6600")
  (setq emms-player-mpd-music-directory "~/share/music")
  (add-to-list 'emms-info-functions 'emms-info-mpd)
  (add-to-list 'emms-player-list 'emms-player-mpd)
  (emms-player-mpd-connect)
  (add-hook 'emms-playlist-cleared-hook 'emms-player-mpd-clear))
#+end_src

* Systems
:PROPERTIES:
:header-args: :noweb-ref systems
:END:

** murph

#+begin_src nix
nixosConfigurations.murph = nixpkgs.lib.nixosSystem {
  modules = with nixosModules; [
    murphHardware
    packageManager
    jacksonUserLinux
    docker
    # TODO:
    # tailscale
    home-manager.nixosModules.home-manager
    personal
    homeLinux
    homeLinuxGraphical
    gh
    gpg
    gopass
    emacsConfiguration
  ];
};
#+end_src

* Templates
:PROPERTIES:
:header-args: :noweb-ref templates
:END:

** Rust
#+begin_src nix
templates.rust = {
  path = ./templates/rust;
  description = "Rust template";
};
#+end_src

** Python
#+begin_src nix
templates.python = {
  path = ./templates/python;
  description = "Python template";
};
#+end_src

** Herbie
[[https://github.com/herbie-fp/herbie]]

#+begin_src nix
templates.herbie = {
  path = ./templates/herbie;
  description = "Herbie template";
};
#+end_src

** Coq
After ~nix flake init~-ing, you'll want to create a ~_CoqProject~
file, containing the line

#+begin_src text :noweb-ref no
-Q . <namespace>
#+end_src

where ~<namespace>~ is the name of whatever is going on with modules
and packages in Coq. Then you'll want to run

#+begin_src shell :noweb-ref no
coq_makefile -f _CoqProject *.v -o Makefile
#+end_src

Then you can ~make~ and ~make clean~. I got this from reading Software
Foundations, specifically from the beginning of the [[https://softwarefoundations.cis.upenn.edu/lf-current/Induction.html][chapter on induction]].

#+begin_src nix
templates.coq = {
  path = ./templates/coq;
  description = "Coq template";
};
#+end_src
* Commands
** Running ~home-manager switch~ without Home Manager 
#+begin_src sh
nix run github:broughjt/dotfiles#homeConfigurations.jackson@<machine>.activationPackage
#+end_src
** Raspberry Pi Serial Console
See
[[https://www.jeffgeerling.com/blog/2021/attaching-raspberry-pis-serial-console-uart-debugging]].

#+begin_src shell
screen /dev/tty.usbserial-1420 115200
#+end_src
** Installing nix-darwin from scratch
See [[https://github.com/LnL7/nix-darwin#flakes]].

Step 1 is creating the flake (enabling the proper flags for stupid
reasons nix is experimental):

#+begin_src shell
nix flake --extra-experimental-features nix-command --extra-experimental-features flakes init -t nix-darwin
#+end_src

Then run this command to install nix-darwin:

#+begin_src shell
nix run --extra-experimental-features nix-command --extra-experimental-features flakes nix-darwin -- switch --flake /path/to/flake.nix
#+end_src

** Adding new ssh keys to GitHub

If you need to generate a new one, see
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.

Then run

#+begin_src shell
pbcopy < ~/.ssh/id_ed25519.pub
#+end_src

but substitute ~id_ed25519~ for the actual name of your public key file.

To test connection,

#+begin_src shell
ssh -T git@github.com
#+end_src
* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
* Footnotes
[fn:1] "No. Suffer my pain"
[fn:2] https://twitter.com/bcantrill/status/1007680560133623808 
