#+title: Configuration
#+date: <2023-08-15 Tue>
#+author: Jackson Brough

* "Are these your configuration files, Larry?"

This has been my experience with Emacs: I would re-clone my ~.emacs.d~
and recommit myself to the true way. It would last about a month or
so, and then I would hit up against some great stumbling block that no
amount of blog post debugging would fix. At that point I would throw
up my hands, admit to myself that I wasn't a real man, and go back to
VSCode.

I came back after a full year of not using Emacs because I was going
to be spending the summer writing [[https://github.com/herbie-fp/herbie][a bunch of Racket code]] and felt like
a fraud doing so in VSCode. I think there were a couple factors that
kept me from relapsing when August came around: I learned some elisp,
read the Info tutorial in its entirety so I would know how to use it,
and forced myself to ~C-h~ before googling a problem; I accidently
joined the NixOS cult, wasting a perfectly good summer weekend in the
process (See ~hlissner~'s [[https://github.com/hlissner/dotfiles][dotfiles]] for how 2 flakes[fn:1], and check out
Ian Henry's [[https://ianthehenry.com/posts/how-to-learn-nix/introduction/][blog series]] if you'd like some genuine comedy with your
maddenning Nix journey - I thought his writing was seriously
hilarious); I also made my first pass through /How to Take Smart
Notes/ by SÃ¶nke Ahrens this summer, and am therefore obligated to try
becoming an org-roam cultist as well.

I tried the whole [[https://nixos.wiki/wiki/Import_From_Derivation][IFD]] thing, and back in the git history there is an
attempt at a tiny flake that had just enough to tangle this org file,
build the generated flake as a derivation, and evaluate that
derivation by importing it, but I can't yet bend spoons with my nix
fu, so I have settled on the "commit the build artifacts" approach,
which I'm actually decently happy with.

* Flake
#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "Are these your configuration files, Larry?";

  nixConfig = {
    extra-substituters = [
      "https://cache.nixos.org/"
      "https://nix-community.cachix.org"
    ];

    extra-trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";

    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    nix-darwin.url = "github:LnL7/nix-darwin";
    nix-darwin.inputs.nixpkgs.follows = "nixpkgs";

    nixcasks.url = "github:jacekszymanski/nixcasks";
    nixcasks.inputs.nixpkgs.follows = "nixpkgs";

    emacs-overlay.url = "github:nix-community/emacs-overlay";
    emacs-overlay.inputs.nixpkgs.follows = "nixpkgs";

    agenix.url = "github:ryantm/agenix";
    agenix.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = { self, nixpkgs, home-manager, nix-darwin, nixcasks, emacs-overlay, agenix }:
    rec {
      nixosModules = rec {
        <<modules>>
      };
      <<systems>>
      formatter = nixpkgs.lib.genAttrs [ "x86_64-darwin" "x86_64-linux" "aarch64-linux" ] (system: {
        system = nixpkgs.legacyPackages.${system}.nixpkgs-fmt;
      });
      <<templates>>
    };
}
#+end_src
* Modules
:PROPERTIES:
:header-args: :noweb-ref modules
:END:

** Personal information
#+begin_src nix
personal = { lib, ... }:

  {
    options.personal = lib.mkOption {
      type = lib.types.attrs;
      default = {
        userName = "jackson";
        fullName = "Jackson Brough";
        email = "jacksontbrough@gmail.com";
        devices = {
          kenobi = {
            ssh = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBndIK51b/o6aSjuTdoa8emnpCRg0s5y68oXAFR66D4/ jacksontbrough@gmail.com";
            syncthing = "7MDSHYK-QQSLKTX-LDA4VKP-EJASTEQ-V5JUGRT-ZRCNC7K-BFK6KQR-GAZ4JQV";
          };
          share1 = {
            ssh = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFpnGMEUElcwgnuHpBXQa4xotZrRdT6VC/7b9n5TykXZ root@share1";
            syncthing = "CQ6ZTVZ-PWRWMW2-2BTFJ7V-XSMIHHU-VS4JIPD-HI3ALDJ-FH6HW5L-Z3WDIAX";
            hostName = "share1.tail662f8.ts.net";
          };
          jackson-broughs-iphone = {
            syncthing = "64BJT3J-XFGZYTG-TMJXAS5-4XACLPE-JUF6XHS-5G4DFYW-2QVAC4T-LLRKUAL";
          };
        };
      };
    };
  };
#+end_src

** Default directories
#+begin_src nix
defaultDirectories = { config, lib, ... }:

  {
    options.defaultDirectories = {
      repositoriesDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/repositories"; };
      localDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/local"; };
      scratchDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/scratch"; };
      shareDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/share"; };
    };
  };
#+end_src
** Package manager configuration
Make Nix can flakes.

#+begin_src nix
package-manager = { pkgs, ... }:

  {
    nix.package = pkgs.nixFlakes;
    nix.settings.experimental-features = [ "nix-command" "flakes" ];

    nixpkgs.config.allowUnfree = true;
  };
#+end_src
** System
I include ~git~ (and ~curl~ and ~neovim~) on every system to prevent a
world of pain where I spend upwards of twenty minutes cursing the nix
2.4 binary before realizing that it wants git to exist in the universe
but refused to tell me that. Prolly should also include the busybox
tools on every system, but that had weird ~lspci~ output that left a
bad taste in my mouth. Also, I don't yet feel fully qualified: I
haven't had to set my init process to a statically linked python2 to
recover my machine.

#+begin_src nix
system = { config, pkgs, ... }:

  {
    imports = [ agenix.nixosModules.default package-manager personal ];

    nix.settings.trusted-users = [ "root" config.personal.userName ];

    environment.systemPackages = with pkgs; [ curl git neovim ];
    environment.shells = with pkgs; [ bashInteractive zsh fish ];

    programs.fish.enable = true;

    users.users.${config.personal.userName}.shell = pkgs.fish;
  };
#+end_src
*** TODO Try nushell?
** Linux system
#+begin_src nix
linuxSystem = { config, pkgs, ... }:

  {
    imports = [ system ];

    system.stateVersion = "23.05";

    hardware.enableRedistributableFirmware = true;

    users.users.${config.personal.userName} = {
      home = "/home/${config.personal.userName}";
      extraGroups = [ "docker" "wheel" ];
      isNormalUser = true;
    };

    virtualisation.docker.enable = true;

    services.openssh.enable = true;
  };
#+end_src
*** TODO Remove ssh password authentication
** Darwin system
#+begin_src nix
darwinSystem = { config, pkgs, ... }:

  {
    imports = [ system ];

    config = {
      services.nix-daemon.enable = true;
      system.configurationRevision = self.rev or self.dirtyRev or null;
      system.stateVersion = 4;

      users.users.${config.personal.userName}.home = "/Users/${config.personal.userName}";

      homebrew.enable = true;
      homebrew.casks = [
        "discord"
        "docker"
        "logseq"
        "slack"
        "spotify"
        "zoom"
      ];

      services.tailscale.enable = true;
    };
  };
#+end_src
** Raspberry pi 4
#+begin_src nix
raspberryPi4 = ({config, modulesPath, lib, pkgs, ... }:

  {
    imports = [
      linuxSystem
    ];

    boot = {
      kernelParams = [ "console=ttyS1,115200n8" ];
      initrd.availableKernelModules = [ "xhci_pci" "usbhid" "usb_storage" ];
      loader = {
        grub.enable = false;
        generic-extlinux-compatible.enable = true;
      };
    };

    fileSystems = {
      "/" = {
        device = "/dev/disk/by-label/NIXOS_SD";
        fsType = "ext4";
        options = [ "noatime" ];
      };
    };

    networking.wireless = {
      enable = true;
      interfaces = [ "wlan0" ];
    };

    powerManagement.enable = true;
    powerManagement.cpuFreqGovernor = "ondemand";
  });
#+end_src
** ~share~
See [[https://wes.today/nixos-syncthing/]].

#+begin_src nix
share = ({ config, pkgs, ... }:
  
  {
    imports = [
      tailscale-autoconnect
    ];
    
    environment.systemPackages = [ pkgs.tailscale ];
    
    services.tailscaleAutoConnect = {
      enable = true;
      loginServer = "https://login.tailscale.com";
    };

    services.syncthing = {
      enable = true;
      openDefaultPorts = true;
      user = config.personal.userName;
      dataDir = config.users.users.${config.personal.userName}.home;
      guiAddress = "0.0.0.0:8384";
      overrideDevices = true;
      overrideFolders = true;
      settings = {
        devices = {
          "kenobi".id = config.personal.devices.kenobi.syncthing;
          "jackson-broughs-iphone".id = config.personal.devices.jackson-broughs-iphone.syncthing;
        };
        folders = {
          "share" = {
            path = config.services.syncthing.dataDir + "/share";
            devices = [ "kenobi" "jackson-broughs-iphone" ];
          };
        };
      };
    };
    users.users.${config.personal.userName}.extraGroups = [ "syncthing" "nginx" ];

    # age.secrets.webdav-user1 = {
      # file = ./secrets/webdav-user1.age;
      # mode = "770";
      # owner = "nginx";
      # group = "nginx";
    # };
    services.nginx = {
      enable = true;
      user = config.personal.userName;
      group = "nginx";
      additionalModules = with pkgs.nginxModules; [ dav ];
      # TODO: This should be a configuration option, not hardcoded to share1
      virtualHosts.${config.personal.devices.share1.hostName} = {
        forceSSL = true;
        # Same here
        root = config.services.syncthing.dataDir + "/share";
        # TODO: Same here
        basicAuth.foo = "bar";
        locations."/".extraConfig = ''
          dav_methods PUT DELETE MKCOL COPY MOVE;
          dav_ext_methods PROPFIND OPTIONS;
          dav_access user:rw group:rw all:rw;

          client_max_body_size 0;
          create_full_put_path on;

          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain; charset=utf-8';
              add_header 'Content-Length' 0;
              return 204;
          }
          if ($request_method = 'POST') {
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
          }
          if ($request_method = 'GET') {
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
          }
        '';
      };
    };
    # security.acme = {
      # acceptTerms = true;
      # defaults.email = config.personal.email;
    # };
  });
#+end_src
** ~share1~
#+begin_src nix
share1 = ({ config, pkgs, ... }:

  {
    imports = [
      raspberryPi4
      wireless
      share
    ];

    networking.hostName = "share1";

    users.users = {
      ${config.personal.userName}.openssh.authorizedKeys.keys = [ config.personal.devices.kenobi.ssh ];
      root.openssh.authorizedKeys.keys = [ config.personal.devices.kenobi.ssh ];
    };

    age.secrets.share1-auth-key1.file = ./secrets/share1-auth-key1.age;
    services.tailscaleAutoConnect.authKeyFile = config.age.secrets.share1-auth-key1.path;
    services.nginx.virtualHosts.${config.personal.devices.share1.hostName} = let
      prefix = config.users.users.${config.personal.userName}.home + "/.local/share/nginx/";
    in
      {
        sslCertificate = prefix + "share1.tail662f8.ts.net.crt";
        sslCertificateKey = prefix + "share1.tail662f8.ts.net.key";
      };

    nixpkgs.hostPlatform = "aarch64-linux";
  });
#+end_src
** Home
#+begin_src nix
home = { lib, config, pkgs, ... }:

  {
    imports = [ personal defaultDirectories ];

    nixpkgs.overlays = [ agenix.overlays.default ];

    home.username = config.personal.userName;
    home.stateVersion = "23.05";
    home.packages = with pkgs; [
      pkgs.agenix
      direnv
      eza
      gopass
      jq
      lldb
      ripgrep
    ];
    programs.home-manager.enable = true;
  
    xdg.enable = true;
    xdg.cacheHome = "${config.home.homeDirectory}/.cache";
    xdg.configHome = "${config.home.homeDirectory}/.config";
    xdg.dataHome = "${config.home.homeDirectory}/.local/share";
    xdg.stateHome = "${config.home.homeDirectory}/.local/state";
  
    programs.fish = {
      enable = true;
      interactiveShellInit = "fish_vi_key_bindings";
      shellAliases.ls = "exa --group-directories-first";
    };
  
    programs.git = {
      enable = true;
      userName = config.personal.fullName;
      userEmail = config.personal.email;
      signing.key = "1BA5F1335AB45105";
      signing.signByDefault = true;
      # "Are the worker threads going to unionize?"
      extraConfig.init.defaultBranch = "main";
    };
  
    programs.gh = {
      enable = true;
      settings.git_protocol = "ssh";
    };
  
    programs.ssh.enable = true;
  
    programs.gpg = {
      enable = true;
      homedir = "${config.xdg.dataHome}/gnupg";
    };
  
    xdg.configFile.gopass = {
      target = "gopass/config";
      text = ''
        [mounts]
            path = ${config.defaultDirectories.repositoriesDirectory}/passwords
        [recipients]
            hash = c9903be2bdd11ffec04509345292bfa567e6b28e7e6aa866933254c5d1344326
      '';
    };
  };
#+end_src
** Darwin home
I got the nice ~pman~ command from this
[[https://robservatory.com/open-postscript-files-in-preview-in-macos-ventura/][blog
post]], which shows how to
open man pages in Preview.

#+begin_src nix
darwinHome = { config, pkgs, nixcasks, lib, ... }:

{
  imports = [ home emacsConfiguration defaultSettings ];
   
  nixpkgs.overlays = [ (final: prev: { inherit nixcasks; }) ];

  home.homeDirectory = "/Users/${config.personal.userName}";
  home.packages = with pkgs; [
    # Seems to be broken
    # nixcasks.slack
    # Seems to be broken
    # nixcasks.docker
    jetbrains-mono
    (pkgs.texlive.combine {
      inherit (pkgs.texlive) scheme-basic
        dvisvgm dvipng
        wrapfig amsmath ulem hyperref capt-of
        bussproofs;
    })
  ];

  programs.fish = {
    interactiveShellInit = "eval (brew shellenv)";
    functions.pman = "mandoc -T pdf (man -w $argv) | open -fa Preview";
  };

  programs.emacs.package = emacsOverlay pkgs pkgs.emacs29-macport;
  home.sessionVariables.EDITOR = "emacsclient";

  services.syncthing.enable = true;
};
#+END_SRC
*** ~default~ settings
#+BEGIN_SRC nix
defaultSettings = { config, lib, ... }:

{
  home.activation = {
    activateSettings = lib.hm.dag.entryAfter
      [ "writeBoundary" ] 
      "/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u";
  };

  targets.darwin.defaults = {
    NSGlobalDomain = {
      AppleInterfaceStyleSwitchesAutomatically = true;
      WebKitDeveloperExtras = true;
    };

    "com.apple.dock" = {
      orientation = "left";
      # show-recents = false;
      # static-only = true;
      autohide = true;
    };

    # TODO: Change to ~/shared/pictures
    "com.apple.screencapture" = {
      location = config.defaultDirectories.scratchDirectory;
    };

    "com.apple.Safari" = {
      AutoOpenSafeDownloads = false;
      SuppressSearchSuggestions = true;
      UniversalSearchEnabled = false;
      AutoFillFromAddressBook = false;
      AutoFillPasswords = false;
      IncludeDevelopMenu = true;
      SandboxBroker.ShowDevelopMenu = true;
      AutoFillCreditCardData = false;
      AutoFillMiscellaneousForms = false;
      ShowFavoritesBar = false;
      WarnAboutFraudulentWebsites = true;
      WebKitJavaEnabled = false;
    };

    "com.apple.AdLib" = {
      allowApplePersonalizedAdvertising = false;
    };

    "com.apple.finder" = {
      AppleShowAllFiles = true;
      ShowPathbar = true;
    };

    "com.apple.print.PrintingPrefs" = {
      "Quit When Finished" = true;
    };

    "com.apple.SoftwareUpdate" = {
      AutomaticCheckEnabled = true;
      ScheduleFrequency = 1;
      AutomaticDownload = 1;
      CriticalUpdateInstall = 1;
    };
  };
};
#+end_src
*** TODO Dedupliate texlive package config
*** TODO Add taps to nixcasks
*** TODO Make Slack, Spotify, and Zoom regular packages
** Linux home
#+begin_src nix
linuxHome = { config, pkgs, ... }:

  {
    imports = [ home ];

    home.homeDirectory = "/home/${config.personal.userName}";
    home.packages = with pkgs; [
      killall
      docker-compose
    ];

    services.ssh-agent.enable = true;
    services.gpg-agent.enable = true;
  };
#+end_src

*** Headless
#+begin_src nix
linuxHomeHeadless = { pkgs, ... }:
  {
    imports = [ linuxHome ];

    services.gpg-agent.pinentryFlavor = "tty";
  };
#+end_src
*** Graphical
#+begin_src nix
linuxHomeGraphical = { config, pkgs, ... }:

{
  imports = [ linuxHome emacsConfiguration dconfSettings ];

  home.packages = with pkgs; [
    pinentry-gnome
    jetbrains-mono
    source-sans
    source-serif
    (pkgs.texlive.combine {
      inherit (pkgs.texlive) scheme-basic
        dvisvgm dvipng
        wrapfig amsmath ulem hyperref capt-of
        bussproofs;
    })
  
    gnome.dconf-editor
    gnomeExtensions.pop-shell
    whitesur-gtk-theme
    whitesur-icon-theme
    
    slack
    spotify
    playerctl
  ];
  
  xdg.userDirs = {
    createDirectories = true;
    documents = config.defaultDirectories.scratchDirectory;
    download = config.defaultDirectories.scratchDirectory;
    music = "${config.defaultDirectories.shareDirectory}/music";
    pictures = "${config.defaultDirectories.shareDirectory}/pictures";
    publicShare = config.defaultDirectories.scratchDirectory;
    templates = config.defaultDirectories.scratchDirectory;
    videos = "${config.defaultDirectories.shareDirectory}/videos";
  };
  
  fonts.fontconfig.enable = true;

  services.gpg-agent.pinentryFlavor = "gnome3";

  programs.kitty = {
    enable = true;
    font = { name = "JetBrains Mono"; size = 12; };
  };
  
  programs.firefox = {
    enable = true;
    enableGnomeExtensions = false;
  };
    
  programs.emacs.package = emacsOverlay pkgs pkgs.emacs-unstable-pgtk;
  services.emacs = {
    enable = true;
    package = config.programs.emacs.package;
    defaultEditor = true;
    startWithUserSession = "graphical";
  };

  # services.syncthing.enable = true;
};
#+END_SRC

**** Slack overlay
Patch slack to work natively on wayland by passing extra electron
command line arguments. See

- https://wiki.archlinux.org/title/wayland
- https://nixos.wiki/wiki/Slack
- TODO Seems broken, running X
- TODO Screen sharing

#+begin_src nix
slackOverlay = { pkgs, ... }:

{
  nixpkgs.overlays = [
    (final: prev: {
      slack = prev.slack.overrideAttrs (previous: {
        installPhase = previous.installPhase + ''
          rm $out/bin/slack
  
          makeWrapper $out/lib/slack/slack $out/bin/slack \
          --prefix XDG_DATA_DIRS : $GSETTINGS_SCHEMAS_PATH \
          --prefix PATH : ${pkgs.lib.makeBinPath [pkgs.xdg-utils]} \
          --add-flags "--ozone-platform-hint=auto --enable-features=WaylandWindowDecorations --enable-webrtc-pipewire-capturer"
        '';
      });
    })
  ];
};
#+end_src
**** ~dconf~ settings
See
- https://the-empire.systems/nixos-gnome-settings-and-keyboard-shortcuts
- https://hoverbear.org/blog/declarative-gnome-configuration-in-nixos/

#+BEGIN_SRC nix
dconfSettings = { config, ... }:

{
  dconf.settings = {
    "org/gnome/shell" = {
      disable-user-extensions = false;
      disabled-extensions = "disabled";
      enabled-extensions = [
        "pop-shell@system76.com"
      ];
    };
    "org/gnome/shell/extensions/pop-shell" = {
      tile-by-default = true;
    };
    "org/gnome/desktop/wm/keybindings" = {
      close = [ "<Super>q" ];
      minimize = [ "<Super>comma" ];
      toggle-maximized = [ "<Super>m" ];
      switch-to-workspace-1 = [ "<Super>1" ];
      switch-to-workspace-2 = [ "<Super>2" ];
      switch-to-workspace-3 = [ "<Super>3" ];
      switch-to-workspace-4 = [ "<Super>4" ];
      switch-to-workspace-5 = [ "<Super>5" ];
      switch-to-workspace-6 = [ "<Super>6" ];
      switch-to-workspace-7 = [ "<Super>7" ];
      switch-to-workspace-8 = [ "<Super>8" ];
      switch-to-workspace-9 = [ "<Super>9" ];
      move-to-workspace-1 = [ "<Super><Shift>1" ];
      move-to-workspace-2 = [ "<Super><Shift>2" ];
      move-to-workspace-3 = [ "<Super><Shift>3" ];
      move-to-workspace-4 = [ "<Super><Shift>4" ];
      move-to-workspace-5 = [ "<Super><Shift>5" ];
      move-to-workspace-6 = [ "<Super><Shift>6" ];
      move-to-workspace-7 = [ "<Super><Shift>7" ];
      move-to-workspace-8 = [ "<Super><Shift>8" ];
      move-to-workspace-9 = [ "<Super><Shift>9" ];
    };
    "org/gnome/shell/keybindings" = {
      toggle-message-tray = [ ];
      focus-active-notification = [ ];
      toggle-overview = [ ];
      switch-to-application-1 = [ ];
      switch-to-application-2 = [ ];
      switch-to-application-3 = [ ];
      switch-to-application-4 = [ ];
      switch-to-application-5 = [ ];
      switch-to-application-6 = [ ];
      switch-to-application-7 = [ ];
      switch-to-application-8 = [ ];
      switch-to-application-9 = [ ];
    };
    "org/gnome/mutter/keybindings" = {
      switch-monitor = [ ];
    };
    "org/gnome/settings-daemon/plugins/media-keys" = {
      rotate-video-lock-static = [ ];
      screenreader = [ ];
      custom-keybindings = [
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/"
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/"
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/"
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/"
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/"
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/"
        "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/"
      ];
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0" = {
      name = "Terminal";
      command = "kitty";
      binding = "<Super>t";
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1" = {
      name = "Browser";
      command = "firefox";
      binding = "<Super>b";
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2" = {
      name = "Emacs";
      command = "emacsclient -c";
      binding = "<Super>e";
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3" = {
      name = "Spotify";
      command = "spotify";
      binding = "<Super>s";
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4" = {
      name = "Next";
      command = "playerctl next";
      binding = "<Super>n";
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5" = {
      name = "Previous";
      command = "playerctl previous";
      binding = "<Super>p";
    };
    "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6" = {
      name = "Play";
      command = "playerctl play-pause";
      binding = "<Super>i";
    };
    "org/gnome/desktop/wm/preferences" = {
      theme = "WhiteSur";
      num-workspaces = 9;
    };
    "org/gnome/desktop/interface" = {
      clock-format = "12h";
      color-scheme = "prefer-dark";
      enable-hot-corners = false;
      gtk-theme = "WhiteSur";
      icon-theme = "WhiteSur";
    };
    "org/gnome/desktop/background" = {
      picture-uri = "file://${config.xdg.userDirs.pictures}/deep-field.png";
      picture-uri-dark = "file://${config.xdg.userDirs.pictures}/deep-field.png";
    };
  };
};
#+end_src
** Wireless
#+begin_src nix
wireless = ({ config, ... }: 

  {
    age.secrets.wireless.file = ./secrets/wireless.age;
    networking.wireless = {
      enable = true;
      environmentFile = config.age.secrets.wireless.path;
      networks."TheShire".psk = "@THE_SHIRE_PSK@";
      networks."DudeCave".psk = "@DUDE_CAVE_PSK@";
    };
  });
#+end_src
** Tailscale auto-connect
Stolen from some article I can no longer find. Wish I could just pull
in their flake but for some reason they got rid of it.

#+begin_src nix
tailscale-autoconnect = { config, lib, pkgs, ... }:

with lib; let
  cfg = config.services.tailscaleAutoConnect;
in {
  options.services.tailscaleAutoConnect = {
    enable = mkEnableOption "tailscaleAutoConnect";
    authKeyFile = mkOption {
      type = types.str;
      description = "The authkey to use for authentication with Tailscale";
    };

    loginServer = mkOption {
      type = types.str;
      default = "";
      description = "The login server to use for authentication with Tailscale";
    };

    advertiseExitNode = mkOption {
      type = types.bool;
      default = false;
      description = "Whether to advertise this node as an exit node";
    };

    exitNode = mkOption {
      type = types.str;
      default = "";
      description = "The exit node to use for this node";
    };

    exitNodeAllowLanAccess = mkOption {
      type = types.bool;
      default = false;
      description = "Whether to allow LAN access to this node";
    };
  };

  config = mkIf cfg.enable {
    assertions = [
      {
        assertion = cfg.authKeyFile != "";
        message = "authKeyFile must be set";
      }
      {
        assertion = cfg.exitNodeAllowLanAccess -> cfg.exitNode != "";
        message = "exitNodeAllowLanAccess must be false if exitNode is not set";
      }
      {
        assertion = cfg.advertiseExitNode -> cfg.exitNode == "";
        message = "advertiseExitNode must be false if exitNode is set";
      }
    ];

    systemd.services.tailscale-autoconnect = {
      description = "Automatic connection to Tailscale";

      # make sure tailscale is running before trying to connect to tailscale
      after = ["network-pre.target" "tailscale.service"];
      wants = ["network-pre.target" "tailscale.service"];
      wantedBy = ["multi-user.target"];

      serviceConfig.Type = "oneshot";

      script = with pkgs; ''
        # wait for tailscaled to settle
        sleep 2

        # check if we are already authenticated to tailscale
        status="$(${tailscale}/bin/tailscale status -json | ${jq}/bin/jq -r .BackendState)"
        # if status is not null, then we are already authenticated
        echo "tailscale status: $status"
        if [ "$status" != "NeedsLogin" ]; then
            exit 0
        fi

        # otherwise authenticate with tailscale
        # timeout after 10 seconds to avoid hanging the boot process
        ${coreutils}/bin/timeout 10 ${tailscale}/bin/tailscale up \
          ${lib.optionalString (cfg.loginServer != "") "--login-server=${cfg.loginServer}"} \
          --authkey=$(cat "${cfg.authKeyFile}")

        # we have to proceed in two steps because some options are only available
        # after authentication
        ${coreutils}/bin/timeout 10 ${tailscale}/bin/tailscale up \
          ${lib.optionalString (cfg.loginServer != "") "--login-server=${cfg.loginServer}"} \
          ${lib.optionalString (cfg.advertiseExitNode) "--advertise-exit-node"} \
          ${lib.optionalString (cfg.exitNode != "") "--exit-node=${cfg.exitNode}"} \
          ${lib.optionalString (cfg.exitNodeAllowLanAccess) "--exit-node-allow-lan-access"}
      '';
    };

    networking.firewall = {
      trustedInterfaces = ["tailscale0"];
      allowedUDPPorts = [config.services.tailscale.port];
    };

    services.tailscale = {
      enable = true;
      useRoutingFeatures =
        if cfg.advertiseExitNode
        then "server"
        else "client";
    };
  };
};
#+end_src
** Home Manager NixOS module
#+begin_src nix
homeManagerNixOSModule = module: inputs:
  {
    imports = [ personal ];

    home-manager.users.${inputs.config.personal.userName} = (module inputs);
  };
#+end_src
* Emacs
** Nix
:PROPERTIES:
:header-args: :noweb-ref modules
:END:

*** Overlay
This is not actually a NixOS module. I guess it doesn't matter for
now.

#+begin_src nix
emacsOverlay = (pkgs: package:
  (pkgs.emacsWithPackagesFromUsePackage {
    inherit package;
    config = ./emacs.el;
    defaultInitFile = true;
    extraEmacsPackages = epkgs: with epkgs; [ treesit-grammars.with-all-grammars ];
    alwaysEnsure = true;
  }));
#+end_src
*** Module
#+begin_src nix
emacsConfiguration = { pkgs, ... }:

  {
    nixpkgs.overlays = with emacs-overlay.overlays; [ emacs package ];

    programs.emacs.enable = true;
  };
#+end_src
** Configuration
:PROPERTIES:
:header-args: :tangle emacs.el
:END:

*** Disable package manager
I'm not actually sure where I got this code, and I'm not sure it's
even working. When I've searched it, most people are using it in their
~early-init.el~, which I'm not sure how to get working with
~emacsWithPackagesFromUsePackage~.

#+begin_src elisp
(setq package-enable-at-startup nil)
(setq use-package-ensure-function 'ignore)
(setq package-archives nil)

(setq use-package-always-ensure t)
(eval-when-compile (require 'use-package))
;; Required for ~:bind~ to work later
(require 'bind-key)
#+end_src

*** Defaults
I gotta work on this. Much of this is pulled from Emacs configuration
I started back in 2019-2020. A lot of it is probably not necessary but
I'm a little scared to touch it for fear I'll rediscover one of the
painful experiences that led me to try "fixing it" here.

#+begin_src elisp
(when (fboundp 'menu-bar-mode) (menu-bar-mode 0))
(when (fboundp 'tool-bar-mode) (tool-bar-mode 0))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
(when (eq system-type 'gnu/linux)
  (add-to-list 'default-frame-alist '(undecorated . t))
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))
(add-to-list 'default-frame-alist `(font . ,(if (eq system-type 'gnu/linux) "JetBrainsMono 12" "JetBrains Mono 14")))
(setq visible-bell t)
(setq display-line-numbers-type 'visual)
(global-display-line-numbers-mode)

;; TODO: Actually understand these from long ago and hopefully get rid of most of it
;; TODO: Make path implicit
(setq local-directory (expand-file-name "~/.local/data/emacs/"))
(setq backup-directory (concat local-directory "backups/"))
(setq auto-save-directory (concat local-directory "auto-saves/"))
(setq backup-directory-alist '(("*" . ,backup-directory)))
(setq backup-inhibited t)
(setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))
(setq auto-save-list-file-prefix auto-save-directory)
(setq auto-save-default nil)
(setq create-lockfiles nil)
(setq vc-make-backup-files t)
;; TODO: Ideally just don't have one
(setq custom-file (concat user-emacs-directory "custom.el"))

(setq-default indent-tabs-mode nil)
#+end_src

Here's how I think I'm going to do this. Below this paragraph is all
of the emacs defaults that I've added since making the configuration
literate. I'll just incrementally add stuff here as it becomes
relevant to me.

*** Evil mode
#+begin_src elisp
(use-package evil
 :init
 (setq evil-want-keybinding nil)
 :custom
 (evil-undo-system 'undo-redo)
 :config
 (evil-mode 1))

(use-package evil-collection
 :after evil
 :custom (evil-want-keybinding nil)
 :init
 (evil-collection-init))
#+end_src

**** TODO Figure out ~evil-want-keybinding~
*** Org
Still very much in the learning stage with org-mode.

Useful stuff:

- [[http://doc.norang.ca/org-mode.html]]

#+begin_src elisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      org-confirm-babel-evaluate nil
      org-babel-load-languages
        '((emacs-lisp . t)
          (shell . t)
          (python . t))
      org-latex-compiler "lualatex"
      org-latex-create-formula-image-program 'dvisvgm
      org-preview-latex-image-directory temporary-file-directory
      org-latex-packages-alist '(("" "bussproofs" t))
      org-startup-with-latex-preview t
      org-startup-with-inline-images t
      org-agenda-span 14)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

(use-package org-modern
  :hook (org-mode . org-modern-mode))

(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))

(use-package org-roam
  :custom
  (org-roam-v2-ack t)
  ;; (org-directory "~/share/org")
  (org-roam-directory "~/share/notes")
  (org-roam-dailies-directory "journals/")
  (org-cite-global-bibliography '("~/share/notes/citations.bib"))
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?" :target
      (file+head "pages/${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))
  ;; (org-agenda-files '("~/share/notes" "~/share/notes/daily" "~/share/org"))
  ;; (org-roam-dailies-capture-templates
   ;; '(("d" "default" entry
      ;; "* %?"
      ;; :target (file+head "%<%Y-%m-%d>.org"
                         ;; "#+title: %<%Y-%m-%d>\n\n"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ;; ("C-c n t" . org-roam-dailies-capture-today)
         ;; ("C-c n a" . org-agenda)
         ;; ("C-c n b" . org-iswitchb)
         )
  :config
  (require 'oc-basic)
  (org-roam-setup))
#+end_src

**** TODO Get ~use-package org~ working
**** TODO Inject shareDirectory for notes directory
**** TODO Figure out clocking
**** TODO LogSeq linking stuff [[https://gist.github.com/zot/ddf1a89a567fea73bc3c8a209d48f527]]

*** Completion
Dude I just copied these hip packages from wherever I first saw them
on the internet, I don't actually understand them. They look very pretty though.

#+begin_src elisp
(use-package vertico
  :init
  (vertico-mode))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-x p b" . consult-project-buffer)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ("M-s d" . consult-find)
         ("M-s g" . consult-ripgrep)))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

I suppose ~which-key~ also counts as a completion menu thing. Honestly it
should built into emacs, I would be so screwed without it.

#+begin_src elisp
(use-package which-key
  :config (which-key-mode 1))
#+end_src

There's also ~company~ and ~yasnippet~, which I've never really gone
without so I honestly couldn't say where normal emacs completion
ends and these two start.

#+begin_src elisp
(use-package company
  :custom
  (company-idle-delay 0.1)
  :bind
  (:map company-active-map
	("C-n" . company-select-next)
	("C-p" . company-select-previous))
  :init
  (global-company-mode))
#+end_src

#+begin_src elisp
(use-package yasnippet
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src
*** Debugging
#+begin_src elisp
(use-package dap-mode
  :after lsp-mode
  :commands dap-debug
  :hook ((python-mode . dap-ui-mode)
	 (python-mode . dap-mode))
  :custom
  (dap-python-debugger 'debugpy)
  :config
  (eval-when-compile
    (require 'cl))
  (require 'dap-python)
  (require 'dap-lldb))
#+end_src

*** Themes
Emacs themes: just skip to the end, discover [[https://protesilaos.com][Protesilaos Stavrou]], and
install the ~ef~ themes. Apparently he's building a hut in the Cyprus
mountains?

#+begin_src elisp
(use-package standard-themes)

(use-package modus-themes)

(use-package ef-themes 
  :init
  (load-theme 'ef-light t))
#+end_src

**** TODO Figure out auto theme switching
*** Nix
"Yep! Make a symlink! Youâre an adult!"

#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'")

(use-package envrc
  :config
  (envrc-global-mode))
#+end_src

*** Racket
#+begin_src elisp
(use-package racket-mode)
#+end_src

**** TODO Racket language server
Apparently there's a [[https://github.com/jeapostrophe/racket-langserver][racket langauge server]], should check that out.
*** Rust
#+begin_src elisp
(use-package rust-mode
  :hook
  ((rust-mode . eglot-ensure)
   (rust-mode . flymake-mode))
  :config
  (setq-default eglot-workspace-configuration
                '(:rust-analyzer (:check (:command "clippy")))))
#+end_src

*** Proof general
[[https://existentialtype.wordpress.com/2011/03/27/the-holy-trinity/][The holy trinity.]]

#+begin_src elisp
(use-package proof-general)
#+end_src

*** Magit
#+begin_src elisp
(use-package magit)
#+end_src

*** TODO Kakoune/Helix bindings
These are attempted Kakoune bindings that I haven't had time to finish
yet. Switching keybindings wholesale is kinda hard!

#+begin_src elisp
;; (comment (use-package ryo-modal
;;   ;; :disabled
;;   :bind
;;   ("<escape>" . modal/normal-mode)
;;   :hook
;;   (after-init . modal/setup)
;;   (prog-mode . modal/normal-mode)
;;   :config  
;;   (defun modal/insert-mode ()
;;     "Return to insert mode."
;;     (interactive)
;;     (ryo-modal-mode 0))
;;   
;;   (defun modal/normal-mode ()
;;     "Enter normal mode."
;;     (interactive)
;;     (ryo-modal-mode 1))
;;   
;;   (defun modal/set-mark-at-point ()
;;     "Set the mark at the location of the point."
;;     (interactive)
;;     (set-mark (point)))
;;   
;;   (defun modal/set-mark-at-point-if-inactive ()
;;     "Set the mark at the location of the point if it isn't active."
;;     (interactive)
;;     (unless (use-region-p)
;;       (modal/set-mark-at-point)))
;;    
;;   ;; TODO: What's with rectangle-mark-mode
;;   (defun modal/deactivate-mark ()
;;     "Deactivate the mark.
;; 
;; Deactivate the mark unless mark-region-mode is active."
;;     (interactive)
;;     (unless rectangle-mark-mode (deactivate-mark)))
;; 
;;   ;;; Movement
;; 
;;   ;; TODO: bikeshed name, this is wrong
;;   (defun modal/select-word-end ()
;;     "Select preceding whitespaces and the word on the right of selection end."
;;     (interactive)
;;     (forward-word)
;;     (backward-char))
;; 
;;   (defun modal/backward-same-syntax (count)
;;     "Move backward COUNT times by same syntax blocks."
;;     (interactive "p")
;;     (forward-same-syntax (- count)))
;;  
;;   (defun modal/select-whole-line (count)
;;     "Expand selections to contain full lines."
;;     (interactive "p")
;;     (beginning-of-line)
;;     (modal/set-mark-at-point)
;;     (forward-line count))
;; 
;;   (defun modal/select-to (count character)
;;     "Select to (including) the COUNTth occurance of CHARACTER."
;;     (interactive "p\ncSelect to character: ")
;;     (let ((direction (if (>= count 0) 1 -1)))
;;       (forward-char direction)
;;       (unwind-protect
;;        (search-forward (char-to-string character) nil nil count))
;;       (point)))
;; 
;;   (defun modal/select-until (count character)
;;     "Select until (excluding) the COUNTth occurance of CHARACTER."
;;     (interactive "p\ncSelect until character: ")
;;     (let ((direction (if (>= count 0) 1 -1)))
;;       (forward-char direction)
;;       (unwind-protect
;;        (search-forward (char-to-string character) nil nil count)
;;        (backward-char direction))
;;       (point)))
;; 
;;   (defun modal/goto (count)
;;     "Go to the beginning of the buffer or the COUNTth line."
;;     (interactive "p")
;;     (goto-char (point-min))
;;     (when count (forward-line (1- count))))
;;        
;;   ;;; Changes
;;   
;;   (defun modal/kill (count)
;;     "Kill selected text or delete `count` characters."
;;     (interactive "p")
;;     (if (use-region-p)
;;         (kill-region (region-beginning) (region-end))
;;       (delete-char count t)))
;; 
;;   (defun modal/yank (count)
;;     "Yank COUNT times after the point."
;;     (interactive "p")
;;     (dotimes (_ count) (save-excursion (yank))))
;; 
;;   (defun modal/open-above (count)
;;     "Open COUNT lines above the cursor and go into insert mode."
;;     (interactive "p")
;;     (beginning-of-line)
;;     (dotimes (_ count)
;;       (newline)
;;       (forward-line -1)))
;; 
;;   (defun modal/open-below (count)
;;     "Open COUNT lines below the cursor and go into insert mode."
;;     (interactive "p")
;;     (end-of-line)
;;     (dotimes (_ count)
;;       (electric-newline-and-maybe-indent)))
;; 
;;   (defun modal/join ()
;;     "Join the next line to the current one."
;;     (interactive)
;;     (join-line 1))
;; 
;;   ;; Configuration
;; 
;;   (defun modal/setup ()
;;     "Set up keybindings for normal mode."
;;     (interactive)
;;     (global-subword-mode 1)
;;     (ryo-modal-major-mode-keys
;;      'prog-mode
;;      ("b" modal/backward-same-syntax :first '(modal/set-mark-at-point) :mc-all t)
;;      ("B" modal/backward-same-syntax :first '(modal/set-mark-at-point-if-inactive) :mc-all t)
;;      ("w" forward-same-syntax :first '(modal/set-mark-at-point) :mc-all t)
;;      ("W" forward-same-syntax :first '(modal/set-mark-at-point-if-inactive) :mc-all t))
;;     (ryo-modal-keys
;;      (:mc-all t)
;;      ("a" forward-char :exit t)
;;      ("A" move-end-of-line :exit t)
;;      ("b" backward-word :first '(modal/set-mark-at-point))
;;      ("B" backward-word :first '(modal/set-mark-at-point-if-inactive))
;;      ("c" modal/kill :exit t)
;;      ("C" ignore)
;;      ("d" modal/kill)
;;      ("D" ignore)
;;      ("e" ignore)
;;      ("E" ignore)
;;      ("f" modal/select-to :first '(modal/set-mark-at-point))
;;      ("F" modal/select-to :first '(modal/set-mark-at-point-if-inactive))
;;      ("g" (("g" modal/goto)
;;            ("h" beginning-of-line)
;;            ("i" back-to-indentation)
;;            ("j" end-of-buffer)
;;            ("k" beginning-of-buffer)
;;            ("l" end-of-line)) :first '(modal/deactivate-mark))
;;      ("G" (("g" modal/goto)
;;            ("i" back-to-indentation)
;;            ("h" beginning-of-line)
;;            ("j" end-of-buffer)
;;            ("k" beginning-of-buffer)
;;            ("l" end-of-line)) :first '(modal/set-mark-at-point-if-inactive))
;;      ("h" backward-char :first '(deactivate-mark))
;;      ("H" backward-char :first '(modal/set-mark-at-point-if-inactive))
;;      ("i" modal/insert-mode)
;;      ("I" back-to-indentation :exit t)
;;      ("j" next-line :first '(deactivate-mark))
;;      ("J" next-line :first '(modal/set-mark-at-point-if-inactive))
;;      ("M-j" modal/join)
;;      ("k" previous-line :first '(deactivate-mark))
;;      ("K" previous-line :first '(modal/set-mark-at-point-if-inactive))
;;      ("l" forward-char :first '(deactivate-mark))
;;      ("L" forward-char :first '(modal/set-mark-at-point-if-inactive))
;;      ("m" ignore)
;;      ("M" ignore)
;;      ("n" ignore)
;;      ("N" ignore)
;;      ;; TODO: These don't open the new line at the right indentation
;;      ("o" modal/open-below :exit t)
;;      ("O" modal/open-above :exit t)
;;      ("p" modal/yank)
;;      ("P" ignore)
;;      ("q" ignore)
;;      ("Q" ignore)
;;      ("r" ignore)
;;      ("R" ignore)
;;      ("s" ignore)
;;      ("S" ignore)
;;      ("t" modal/select-until :first '(modal/set-mark-at-point))
;;      ("T" modal/select-until :first '(modal/set-mark-at-point-if-inactive))
;;      ("u" undo)
;;      ("U" undo-redo)
;;      ("v" (("v" recenter)))
;;      ("V" ignore)
;;      ("w" forward-word :first '(modal/set-mark-at-point))
;;      ("W" forward-word :first '(modal/set-mark-at-point-if-inactive))
;;      ("x" modal/select-whole-line)
;;      ("X" ignore)
;;      ("y" kill-ring-save)
;;      ("Y" ignore)
;;      ("z" ignore)
;;      ("Z" ignore)
;;    
;;      ("0" "M-0")
;;      ("1" "M-1")
;;      ("2" "M-2")
;;      ("3" "M-3")
;;      ("4" "M-4")
;;      ("5" "M-5")
;;      ("6" "M-6")
;;      ("7" "M-7")
;;      ("8" "M-8")
;;      ("9" "M-9")
;;    
;;      ("~" ignore)
;;      ("`" ignore)
;;      ("!" ignore)
;;      ("@" ignore)
;;      ("#" ignore)
;;      ("$" ignore)
;;      ("%" ignore)
;;      ("^" ignore)
;;      ("&" ignore)
;;      ("*" ignore)
;;      ("(" ignore)
;;      (")" ignore)
;;      ("-" ignore)
;;      ("_" ignore)
;;      ("=" ignore)
;;      ("+" ignore)
;;      ("<backspace>" ignore)
;;      ("<del>" ignore)
;;      ("[" ignore)
;;      ("{" ignore)
;;      ("]" ignore)
;;      ("}" ignore)
;;      ("|" ignore)
;;      ("\\" ignore)
;;      (";" deactivate-mark)
;;      (":" ignore)
;;      ("'" ignore)
;;      ("\"" ignore)
;;      ("," ignore)
;;      ("<" ignore)
;;      ("." ignore)
;;      (">" ignore)
;;      ("/" ignore)
;;      ("?" ignore)
;; 
;;      ("C-u" scroll-down-command :first '(deactivate-mark))
;;      ("C-d" scroll-up-command :first '(deactivate-mark))))
;;   
;;   (setq ryo-modal-mode-cursor-type 'box)
;;  (setq ryo-modal-cursor-color "pink")))
#+end_src
*** TODO Treesitter
*** TODO ~<space>~ leader
*** TODO Learn dired
*** TODO Terminal emulator in emacs
See https://coredumped.dev/2020/01/04/native-shell-completion-in-emacs/
*** TODO Highlight center line to prevent unncessary ~zz~s
*** TODO Grammarly
*** TODO Check out https://github.com/seagle0128/.emacs.d
*** TODO Try disabling flymake and flycheck when using eglot, maybe slow
https://www.reddit.com/r/emacs/comments/10w30uj/any_good_tips_to_speed_up_eglotpyright_setup/
* Secrets
At this point in my life, I've decided that I don't understand ssh
keys. I've come off Mount Stupid and am in the Valley of Despair. From
this [[https://superuser.com/questions/189355/is-it-ok-to-share-private-key-file-between-multiple-computers-services][stack exchange post]] and other things I've read, my best guess is
that I am *NOT* supposed to have some user key who's private key is
on multiple computers. That would be bad. I should instead have one
key per machine, and there should only be one copy anywhere.

#+begin_src nix :tangle secrets/secrets.nix
let
  kenobi = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBndIK51b/o6aSjuTdoa8emnpCRg0s5y68oXAFR66D4/ jacksontbrough@gmail.com";
  share1 = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFpnGMEUElcwgnuHpBXQa4xotZrRdT6VC/7b9n5TykXZ root@share1";
in
{
  "share1-auth-key1.age".publicKeys = [ kenobi share1 ];
  "webdav-user1.age".publicKeys = [ kenobi share1 ];
  "wireless.age".publicKeys = [ kenobi share1 ];
}
#+end_src
* Templates
:PROPERTIES:
:header-args: :noweb-ref templates
:END:

** Rust
#+begin_src nix
templates.rust = {
  path = ./templates/rust;
  description = "Rust template";
};
#+end_src

** Python
#+begin_src nix
templates.python = {
  path = ./templates/python;
  description = "Python template";
};
#+end_src

** Herbie
[[https://github.com/herbie-fp/herbie]]

#+begin_src nix
templates.herbie = {
  path = ./templates/herbie;
  description = "Herbie template";
};
#+end_src

** Coq
After ~nix flake init~-ing, you'll want to create a ~_CoqProject~
file, containing the line

#+begin_src text :noweb-ref no
-Q . <namespace>
#+end_src

where ~<namespace>~ is the name of whatever is going on with modules
and packages in Coq. Then you'll want to run

#+begin_src shell :noweb-ref no
coq_makefile -f _CoqProject *.v -o Makefile
#+end_src

Then you can ~make~ and ~make clean~. I got this from reading Software
Foundations, specifically from the beginning of the [[https://softwarefoundations.cis.upenn.edu/lf-current/Induction.html][chapter on induction]].

#+begin_src nix
templates.coq = {
  path = ./templates/coq;
  description = "Coq template";
};
#+end_src
* Systems
:PROPERTIES:
:header-args: :noweb-ref systems
:END:

** ~kenobi~
#+begin_src nix
darwinConfigurations.kenobi = nix-darwin.lib.darwinSystem {
  modules = with nixosModules; [
    darwinSystem
    {
      nixpkgs.hostPlatform = "x86_64-darwin";
    }
  ];
};
homeConfigurations."jackson@kenobi" = home-manager.lib.homeManagerConfiguration {
  pkgs = import nixpkgs {
    system = "x86_64-darwin";
    config.allowUnfree = true;
  };
  modules = with nixosModules; [ darwinHome ];
  extraSpecialArgs.nixcasks = nixcasks.legacyPackages."x86_64-darwin";
};
#+end_src
** ~share1~
#+begin_src nix
nixosConfigurations.share1 = nixpkgs.lib.nixosSystem {
  modules = [ nixosModules.share1 ];
};
#+end_src
** Raspberry pi 4 image
#+begin_src nix
nixosConfigurations.share1Image = nixpkgs.lib.nixosSystem {
  modules = [
    nixosModules.share1
    "${nixpkgs}/nixos/modules/installer/sd-card/sd-image-aarch64.nix"
    ({ config, ... }: {
      users.users.${config.personal.userName}.initialPassword = "password";
      users.users.root.initialPassword = "password";
    })
  ];
};
packages.aarch64-linux.share1Image = nixosConfigurations.share1Image.config.system.build.sdImage;
#+end_src
** TODO Get rid of extra ~allowUnfree~s
* Commands
** Running ~home-manager switch~ without Home Manager 
#+begin_src sh
nix run github:broughjt/dotfiles#homeConfigurations.jackson@<machine>.activationPackage
#+end_src

*** TODO Prolly you can make a variable and run this directly from here
** Raspberry Pi Serial Console
See
[[https://www.jeffgeerling.com/blog/2021/attaching-raspberry-pis-serial-console-uart-debugging]].

#+begin_src shell
screen /dev/tty.usbserial-1420 115200
#+end_src
* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
** TODO Figure out how to make tangled files read-only by default
* Footnotes
[fn:1] "No. Suffer my pain"
[fn:2] https://twitter.com/bcantrill/status/1007680560133623808 
