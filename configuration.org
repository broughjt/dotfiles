#+title: Configuration
#+date: [2023-08-15 Tue]
#+author: Jackson Brough

* "Are these your configuration files, Larry?"

This has been my experience with Emacs: I would re-clone my ~.emacs.d~
and recommit myself to the true way. It would last about a month or
so, and then I would hit up against some great stumbling block that no
amount of blog post debugging would fix. At that point I would throw
up my hands, admit to myself that I wasn't a real man, and go back to
VSCode.

I came back after a full year of not using Emacs because I was going
to be spending the summer writing [[https://github.com/herbie-fp/herbie][a bunch of Racket code]] and felt like
a fraud doing so in VSCode. I think there were a couple factors that
kept me from relapsing when August came around: I learned some elisp,
read the Info tutorial in its entirety so I would know how to use it,
and forced myself to ~C-h~ before googling a problem; I accidently
joined the NixOS cult, wasting a perfectly good summer weekend in the
process (See ~hlissner~'s [[https://github.com/hlissner/dotfiles][dotfiles]] for how 2 flakes[fn:1], and check out
Ian Henry's [[https://ianthehenry.com/posts/how-to-learn-nix/introduction/][blog series]] if you'd like some genuine comedy with your
maddenning Nix journey - I thought his writing was seriously
hilarious); I also made my first pass through /How to Take Smart
Notes/ by SÃ¶nke Ahrens this summer, and am therefore obligated to try
becoming an org-roam cultist as well.

* Flake

#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "Are these your configuration files, Larry?";

  nixConfig = {
    extra-substituters = [
      "https://cache.nixos.org/"
      "https://nix-community.cachix.org"
    ];

    extra-trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";

    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    nix-darwin.url = "github:LnL7/nix-darwin";
    nix-darwin.inputs.nixpkgs.follows = "nixpkgs";

    nixcasks.url = "github:jacekszymanski/nixcasks";
    nixcasks.inputs.nixpkgs.follows = "nixpkgs";

    emacs-overlay.url = "github:nix-community/emacs-overlay";
    emacs-overlay.inputs.nixpkgs.follows = "nixpkgs";

    agenix.url = "github:ryantm/agenix";
    agenix.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = { self, nixpkgs, home-manager, nix-darwin, nixcasks, emacs-overlay, agenix }:
    rec {
      nixosModules = rec {
        <<modules>>
      };
      <<systems>>
      formatter = nixpkgs.lib.genAttrs [ "x86_64-darwin" "x86_64-linux" "aarch64-linux" ] (system: {
        system = nixpkgs.legacyPackages.${system}.nixpkgs-fmt;
      });
      <<templates>>
    };
}
#+end_src

* Modules
:PROPERTIES:
:header-args: :noweb-ref modules
:END:

** Personal information

#+begin_src nix
personal = { lib, ... }:

  {
    options.personal = lib.mkOption {
      type = lib.types.attrs;
      default = {
        userName = "jackson";
        fullName = "Jackson Brough";
        email = "jacksontbrough@gmail.com";
        devices = {
          kenobi = {
            ssh = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBndIK51b/o6aSjuTdoa8emnpCRg0s5y68oXAFR66D4/ jacksontbrough@gmail.com";
            syncthing = "7MDSHYK-QQSLKTX-LDA4VKP-EJASTEQ-V5JUGRT-ZRCNC7K-BFK6KQR-GAZ4JQV";
          };
          share1 = {
            ssh = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFpnGMEUElcwgnuHpBXQa4xotZrRdT6VC/7b9n5TykXZ root@share1";
            syncthing = "CQ6ZTVZ-PWRWMW2-2BTFJ7V-XSMIHHU-VS4JIPD-HI3ALDJ-FH6HW5L-Z3WDIAX";
            hostName = "share1.tail662f8.ts.net";
          };
          jackson-broughs-iphone = {
            syncthing = "64BJT3J-XFGZYTG-TMJXAS5-4XACLPE-JUF6XHS-5G4DFYW-2QVAC4T-LLRKUAL";
          };
        };
      };
    };
  };
#+end_src

** Default directories

#+begin_src nix
defaultDirectories = { config, lib, ... }:

  {
    options.defaultDirectories = {
      repositoriesDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/repositories"; };
      localDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/local"; };
      scratchDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/scratch"; };
      shareDirectory = lib.mkOption { type = lib.types.str; default = "${config.home.homeDirectory}/share"; };
    };
  };
#+end_src

** Package manager configuration
Make Nix can flakes.

#+begin_src nix
package-manager = { pkgs, ... }:

  {
    nix.package = pkgs.nix;
    nix.settings.experimental-features = [ "nix-command" "flakes" ];
    nixpkgs.config.allowUnfree = true;
  };
#+end_src

** System

I include ~git~ (and ~curl~ and ~neovim~) on every system to prevent a
world of pain where I spend upwards of twenty minutes cursing the nix
2.4 binary before realizing that it wants git to exist in the universe
but refused to tell me that. Prolly should also include the busybox
tools on every system, but that had weird ~lspci~ output that left a
bad taste in my mouth. Also, I don't yet feel fully qualified: I
haven't had to set my init process to a statically linked python2 to
recover my machine.

#+begin_src nix
system = { config, pkgs, ... }:

  {
    imports = [ package-manager personal ];

    nix.settings.trusted-users = [ "root" config.personal.userName ];

    environment.systemPackages = with pkgs; [ curl git neovim ];
    environment.shells = with pkgs; [ bashInteractive zsh fish ];

    programs.fish.enable = true;

    users.users.${config.personal.userName}.shell = pkgs.fish;
  };
#+end_src

** Linux system

#+begin_src nix
linuxSystem = { config, pkgs, ... }:

  {
    imports = [ system ];

    hardware.enableRedistributableFirmware = true;

    users.users.${config.personal.userName} = {
      home = "/home/${config.personal.userName}";
      extraGroups = [ "docker" "wheel" "networkmanager" ];
      isNormalUser = true;
    };

    virtualisation.docker.enable = true;

    services.openssh.enable = true;

    i18n.defaultLocale = "en_US.UTF-8";
    i18n.extraLocaleSettings = {
      LC_ADDRESS = "en_US.UTF-8";
      LC_IDENTIFICATION = "en_US.UTF-8";
      LC_MEASUREMENT = "en_US.UTF-8";
      LC_MONETARY = "en_US.UTF-8";
      LC_NAME = "en_US.UTF-8";
      LC_NUMERIC = "en_US.UTF-8";
      LC_PAPER = "en_US.UTF-8";
      LC_TELEPHONE = "en_US.UTF-8";
      LC_TIME = "en_US.UTF-8";
    };

    services.xserver = {
      xkb.layout = "us";
      xkb.variant = "";
    };
  };
#+end_src

*** Graphical

#+begin_src nix
linuxSystemGraphical = { config, pkgs, ... }:

  {
    imports = [ linuxSystem ];
    users.users.${config.personal.userName}.extraGroups = [ "networkmanager" "video" ];

    services.xserver = {
      enable = true;
      displayManager.gdm.enable = true;
      displayManager.gdm.wayland = true;
      desktopManager.gnome.enable = true;
    };
    environment.gnome.excludePackages = (with pkgs; [
      gnome-photos
      gnome-tour
      gedit
    ]) ++ (with pkgs.gnome; [
      cheese
      atomix
      epiphany
      evince
      geary
      gnome-characters
      gnome-music
      hitori
      iagno
      tali
      totem
      gnome-calculator
      gnome-calendar
      gnome-clocks
      gnome-contacts
      gnome-maps
      gnome-weather
      # gnome-disk-image-mounter
      # gnome-disks
      # gnome-extensions
      # gnome-extensions-app
      # gnome-logs
      # gnome-system-monitor
      simple-scan
    ]) ++ (with pkgs.gnome.apps; [
      # TODO: Figure how to remove these
      # gnome-connections
      # gnome-help
      # gnome-text-editor
      # gnome-thumbnail-font
    ]);

    services.tailscale.enable = true;
  };
#+end_src

** Darwin system

#+begin_src nix
darwinSystem = { config, pkgs, ... }:

  {
    imports = [ system ];

    config = {
      services.nix-daemon.enable = true;
      system.configurationRevision = self.rev or self.dirtyRev or null;
      system.stateVersion = 4;

      users.users.${config.personal.userName}.home = "/Users/${config.personal.userName}";

      homebrew.enable = true;
      homebrew.casks = [
        "discord"
        "docker"
        "slack"
        "spotify"
        "zoom"
      ];

      services.tailscale.enable = true;
    };
  };
#+end_src

** Home

#+begin_src nix
home = { lib, config, pkgs, ... }:

  {
    imports = [ personal defaultDirectories ];

    nixpkgs.overlays = [ agenix.overlays.default ];

    home.username = config.personal.userName;
    home.stateVersion = "23.05";
    home.packages = with pkgs; [
      direnv
      eza
      fd
      gopass
      ispell
      jq
      lldb
      pkgs.agenix
      ripgrep
    ];
    programs.home-manager.enable = true;
  
    xdg.enable = true;
    xdg.cacheHome = "${config.home.homeDirectory}/.cache";
    xdg.configHome = "${config.home.homeDirectory}/.config";
    xdg.dataHome = "${config.home.homeDirectory}/.local/share";
    xdg.stateHome = "${config.home.homeDirectory}/.local/state";
  
    programs.fish = {
      enable = true;
      interactiveShellInit = "fish_vi_key_bindings";
      shellAliases.ls = "exa --group-directories-first";
    };
  
    programs.git = {
      enable = true;
      userName = config.personal.fullName;
      userEmail = config.personal.email;
      signing.key = "1BA5F1335AB45105";
      signing.signByDefault = true;
      # "Are the worker threads going to unionize?"
      extraConfig.init.defaultBranch = "main";
    };
  
    programs.gh = {
      enable = true;
      settings.git_protocol = "ssh";
    };
  
    programs.ssh.enable = true;
  
    programs.gpg = {
      enable = true;
      homedir = "${config.xdg.dataHome}/gnupg";
    };
  
    xdg.configFile.gopass = {
      target = "gopass/config";
      text = ''
        [mounts]
            path = ${config.defaultDirectories.repositoriesDirectory}/passwords
        [recipients]
            hash = c9903be2bdd11ffec04509345292bfa567e6b28e7e6aa866933254c5d1344326
      '';
    };
  };
#+end_src

** Linux home

#+begin_src nix
linuxHome = { config, pkgs, ... }:
  
  {
    imports = [ home ];
    
    home.homeDirectory = "/home/${config.personal.userName}";
    home.packages = with pkgs; [
      killall
      lldb
      docker-compose
      (pkgs.texlive.combine {
        inherit (pkgs.texlive) scheme-basic
          dvisvgm dvipng
          wrapfig amsmath ulem hyperref capt-of;
      })
    ];
    
    services.ssh-agent.enable = true;
    services.gpg-agent.enable = true;
  };
#+end_src

*** Headless

#+begin_src nix
linuxHomeHeadless = { pkgs, ... }:
  {
    imports = [ linuxHome ];
    
    services.gpg-agent.pinentryPackage = "tty";
  };
#+end_src

*** Graphical

#+begin_src nix
linuxHomeGraphical = { config, pkgs, ... }:

  {
    imports = [ linuxHome emacsConfiguration ];
    
    home.packages = with pkgs; [
      pinentry-gnome
      jetbrains-mono
      source-sans
      source-serif
      
      slack
      spotify
      playerctl
    ];

    xdg.userDirs = {
      createDirectories = true;
      documents = config.personal.scratchDirectory;
      download = config.personal.scratchDirectory;
      music = "${config.personal.shareDirectory}/music";
      pictures = "${config.personal.shareDirectory}/pictures";
      publicShare = config.personal.scratchDirectory;
      templates = config.personal.scratchDirectory;
      videos = "${config.personal.shareDirectory}/videos";
    };

    fonts.fontconfig.enable = true;

    services.gpg-agent.pinentryPackage = "gnome3";

    programs.firefox = {
      enable = true;
      enableGnomeExtensions = false;
    };
    
    programs.emacs.package = emacsOverlay pkgs pkgs.emacs-unstable-pgtk;
    services.emacs = {
      enable = true;
      package = config.programs.emacs.package;
      defaultEditor = true;
      startWithUserSession = "graphical";
    };
  };
#+end_src

** Darwin home

I got the nice ~pman~ command from this [[https://robservatory.com/open-postscript-files-in-preview-in-macos-ventura/][blog post]], which shows how to
open man pages in Preview.

#+begin_src nix
darwinHome = { config, pkgs, nixcasks, lib, ... }:

{
  imports = [ home emacsConfiguration defaultSettings ];
   
  nixpkgs.overlays = [ (final: prev: { inherit nixcasks; }) ];

  home.homeDirectory = "/Users/${config.personal.userName}";
  home.packages = with pkgs; [
    jetbrains-mono
    (pkgs.texlive.combine {
      inherit (pkgs.texlive) scheme-basic
        dvisvgm dvipng
        wrapfig amsmath ulem hyperref capt-of
        bussproofs simplebnf tabularray mathtools;
    })
  ];

  programs.fish = {
    interactiveShellInit = "eval (brew shellenv)";
    functions.pman = "mandoc -T pdf (man -w $argv) | open -fa Preview";
  };

  programs.emacs.package = emacsOverlay pkgs pkgs.emacsMacport;
  home.sessionVariables.EDITOR = "emacsclient";
};
#+END_SRC

*** ~default~ settings
#+BEGIN_SRC nix
defaultSettings = { config, lib, ... }:

{
  home.activation = {
    activateSettings = lib.hm.dag.entryAfter
      [ "writeBoundary" ] 
      "/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u";
  };

  targets.darwin.defaults = {
    NSGlobalDomain = {
      AppleInterfaceStyleSwitchesAutomatically = true;
      WebKitDeveloperExtras = true;
    };

    "com.apple.dock" = {
      orientation = "left";
      autohide = true;
    };

    "com.apple.screencapture" = {
      location = config.defaultDirectories.scratchDirectory;
    };

    "com.apple.Safari" = {
      AutoOpenSafeDownloads = false;
      SuppressSearchSuggestions = true;
      UniversalSearchEnabled = false;
      AutoFillFromAddressBook = false;
      AutoFillPasswords = false;
      IncludeDevelopMenu = true;
      SandboxBroker.ShowDevelopMenu = true;
      AutoFillCreditCardData = false;
      AutoFillMiscellaneousForms = false;
      ShowFavoritesBar = false;
      WarnAboutFraudulentWebsites = true;
      WebKitJavaEnabled = false;
    };

    "com.apple.AdLib" = {
      allowApplePersonalizedAdvertising = false;
    };

    "com.apple.finder" = {
      AppleShowAllFiles = true;
      ShowPathbar = true;
    };

    "com.apple.print.PrintingPrefs" = {
      "Quit When Finished" = true;
    };

    "com.apple.SoftwareUpdate" = {
      AutomaticCheckEnabled = true;
      ScheduleFrequency = 1;
      AutomaticDownload = 1;
      CriticalUpdateInstall = 1;
    };
  };
};
#+end_src
** murph

#+begin_src nix
murphHardware = { config, pkgs, lib, ... }:

  {
    hardware.enableRedistributableFirmware = lib.mkDefault true;
    hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

    system.stateVersion = "23.11";

    boot = {
      initrd.availableKernelModules = [ "nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod" ];
      initrd.kernelModules = [ ];
      kernelModules = [ "kvm-amd" ];
      extraModulePackages = [ ];
      loader.systemd-boot.enable = true;
      loader.efi.canTouchEfiVariables = true;
    };

    fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/9BEE-3421";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };
    fileSystems."/" = {
      device = "/dev/disk/by-uuid/581a668b-5332-4224-a9c2-86f1840e2bf6";
      fsType = "ext4";
    };
    swapDevices = [ ];

    networking.hostName = "murph";
    networking.networkmanager.enable = true;
    networking.useDHCP = lib.mkDefault true;

    time.timeZone = "America/Boise";
  };
#+end_src

* Emacs
** Nix
:PROPERTIES:
:header-args: :noweb-ref modules
:END:

*** Overlay
This is not actually a NixOS module. I guess it doesn't matter for
now.

I guess the lean4-mode package is not on MELPA, so I had to figure out
how to add a custom emacs package using ~fetchFromGitHub~. Long story
short: always check the Nix wiki entry before anything else. It'll
usually shoot you straight. Here's what I used:

- [[https://nixos.wiki/wiki/Emacs#Adding_packages_from_outside_ELPA_.2F_MELPA]]
- [[https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/lean4-mode.20with.20nix-doom-emacs/near/291790287]]
- https://github.com/NixOS/nixpkgs/issues/191128

#+begin_src nix
emacsOverlay = (pkgs: package:
  (pkgs.emacsWithPackagesFromUsePackage {
    inherit package;
    config = ./emacs.el;
    defaultInitFile = true;
    extraEmacsPackages = epkgs: with epkgs; [
      treesit-grammars.with-all-grammars
    ];
    override = epkgs: epkgs // {
      lean4-mode = epkgs.trivialBuild rec {
        pname = "lean4-mode";
        version = "1";
        src = pkgs.fetchFromGitHub {
          owner = "bustercopley";
          repo = "lean4-mode";
          rev = "f6166f65ac3a50ba32282ccf2c883d61b5843a2b";
          sha256 = "sha256-mVZh+rP9IWLs2QiPysIuQ3uNAQsuJ63xgUY5akaJjXc=";
        };
        propagatedUserEnvPkgs = with epkgs;
          [ dash f flycheck lsp-mode magit-section s ];
        buildInputs = propagatedUserEnvPkgs;
        postInstall = ''
          DATADIR=$out/share/emacs/site-lisp/data
          mkdir $DATADIR
          install ./data/abbreviations.json $DATADIR
        '';
      };
    };
    alwaysEnsure = true;
  }));
#+end_src

*** Module

#+begin_src nix
emacsConfiguration = { pkgs, ... }:

  {
    nixpkgs.overlays = with emacs-overlay.overlays; [ emacs package ];

    programs.emacs.enable = true;
  };
#+end_src

** Configuration
:PROPERTIES:
:header-args: :tangle emacs.el
:END:

*** Defaults

Very first, disable the default package manager, because it sucks and
also because we're using Nix instead.

#+begin_src elisp
(setq package-enable-at-startup nil)
(setq use-package-ensure-function 'ignore)
(setq package-archives nil)
#+end_src

Tell ~use-package~ to always ensure because the
[[https://github.com/nix-community/emacs-overlay/tree/master][Emacs overlay documentation]] said to.

#+begin_src elisp
(setq use-package-always-ensure t)
#+end_src

Require the ~bind-key~ module because ~use-package~ ~:bind~
declarations won't work without it.

#+begin_src elisp
(require 'bind-key)
#+end_src

Disable the menu-, tool-, and scroll-bar modes.

#+begin_src elisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

Set the font.

#+begin_src elisp
(set-face-attribute 'default nil :font "JetBrains Mono 14")
#+end_src

Never ever make an audible noise. "The editor does not speak unless
spoken to."

#+begin_src elisp
(setq visible-bell t)
#+end_src

Get the relative line numbers; it's actually suprising how useless I feel
without them.

#+begin_src elisp
(setq display-line-numbers-type 'visual)
(global-display-line-numbers-mode)
#+end_src

Handle backups and autosaves. Autosaves are about preserving the current editing
session, and backups are about recovering previous ones.

#+begin_src elisp
(setq local-directory (expand-file-name "~/.local/data/emacs/"))
(setq backup-directory (concat local-directory "backups/"))
(setq auto-save-directory (concat local-directory "auto-saves/"))
#+end_src

See [[https://www.emacswiki.org/emacs/AutoSave]].

#+begin_src elisp
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))
#+end_src

But don't create lock files ever. That's just a fundamental design
flaw with global mutable filesystems and I don't want Emacs to try to
fix it.

#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

Set the custom file.

#+begin_src elisp
(setq custom-file (concat local-directory "custom.el"))
(load custom-file)
#+end_src

Holy cow: tabs.

#+begin_src elisp
(setq-default indent-tabs-mode nil)
#+end_src

As for ~use-package~ declarations, always remember, the ~init~ keyword
is for code that should run before, the ~config~ keyword is for code
that should run after.

*** Evil mode

#+begin_src elisp
(use-package evil
 :init
 (setq evil-want-keybinding nil)
 :custom
 (evil-undo-system 'undo-redo)
 :config
 (evil-mode 1))

(use-package evil-collection
 :after evil
 :init
 (evil-collection-init))
#+end_src

*** Dired

- https://www.youtube.com/watch?v=L_4pLN0gXGI
- Dired hide details mode
- M-<p,n>! Searches back and forward in mini buffer search history!

*** Org
The bible apparently:

- [[http://doc.norang.ca/org-mode.html]]

Don't indent source blocks.

#+begin_src elisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src

The default behavior of executing source blocks in org mode source
blocks is pretty annoying, you have to confirm execution each
time. Let's disable that and list a few languages which should work
without confirmation. (I'm not actually sure that this works.)

#+begin_src elisp
(setq
 org-confirm-babel-evaluate nil
 org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)))
#+end_src

Now inline latex schenanigans. We want inline latex to be displayed
using SVGs and to render on startup, and for the svg backgrounds to
match the current theme. I also needed to include the ~bussproofs~ package to
get natural deduction proof trees once.

#+begin_src elisp
(setq
 org-latex-compiler "lualatex"
 org-latex-create-formula-image-program 'dvisvgm
 org-preview-latex-image-directory temporary-file-directory
 org-latex-packages-alist '(("" "bussproofs" t) ("" "simplebnf" t))
 org-startup-with-latex-preview t
 org-startup-with-inline-images t)
(with-eval-after-load 'org
  (plist-put org-format-latex-options :background "Transparent"))
#+end_src

I'm an auto-fill-mode advocate. Plain text is rediculous enough as it
is, I definitely don't want to have to manually indent my paragraphs
in org mode.

#+begin_src elisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

TODO: Commentary about GTD system.

#+begin_src elisp
(setq org-directory "~/share/org/")
(setq inbox-file (concat org-directory "inbox.org"))
(setq tasks-file (concat org-directory "tasks.org"))
(setq suspended-file (concat org-directory "suspended.org"))
(setq calendar-file (concat org-directory "calendar.org"))
(setq archive-file (concat org-directory "archive.org"))

(setq org-agenda-files (list tasks-file calendar-file suspended-file))
(setq org-refile-targets
      '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file)
(setq org-archive-location (concat archive-file "::"))
#+end_src

#+begin_src elisp
(setq org-tag-alist '(("next" . ?n) ("wait" . ?w)))
#+end_src

#+begin_src elisp
(setq org-capture-templates
      '(("d" "default" entry (file inbox-file)
         "* %?\n%U\n")))

(bind-key "C-c d d"
          (lambda (&optional GOTO)
            (interactive)
            (org-capture GOTO "d")))
(bind-key "C-c r t"
          (lambda ()
            (interactive)
            (org-refile nil nil (list nil tasks-file nil nil))))
#+end_src

Enable todo state changes by adding "!" to the org keywords.

#+begin_src elisp
(setq org-todo-keywords '((sequence "TODO(!)" "DONE(!)")))
(setq org-log-into-drawer t)
#+end_src

Habits. See [[https://cpbotha.net/2019/11/02/forming-and-maintaining-habits-using-orgmode/]].

#+begin_src elisp
(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t))
#+end_src

#+begin_src elisp
(setq org-cite-global-bibliography '("~/share/notes/citations.bib"))
#+end_src

#+begin_src elisp
(use-package org-roam
  :custom
  (org-roam-directory "~/share/notes")
  :bind
  (("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-db-autosync-mode))

(use-package org-roam-ui
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(use-package git-auto-commit-mode)
#+end_src

#+begin_src elisp :tangle no
(use-package org-ql)
(use-package org-roam-ql)

(use-package org-roam
  :custom
  (org-roam-v2-ack t)
  (org-directory "~/share")
  (org-roam-directory "~/share/notes")
  (org-roam-dailies-directory "journals/")
  (org-cite-global-bibliography '("~/share/notes/citations.bib"))
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?" :target
      (file+head "pages/${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (require 'oc-basic)
  (org-roam-setup))

(use-package org-roam-ui
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(use-package org-gtd
  :after
  org
  :init
  (setq org-gtd-update-ack "3.0.0")
  :custom
  (org-gtd-directory "~/share/org/gtd/")
  (org-edna-use-inheritance t)
  :config
  (org-edna-mode)
  (org-gtd-mode)
  :bind
  (("C-c d c" . org-gtd-capture)
   ("C-c d d" . (lambda (&optional GOTO)
                  (interactive)
                  (org-gtd-capture GOTO "i")))
   ("C-c d p" . org-gtd-process-inbox)
   :map org-gtd-clarify-map
   ("C-c c" . org-gtd-organize)))
#+end_src

*** Completion
Dude I just copied these hip packages from wherever I first saw them
on the internet, I don't actually understand them. They look very pretty though.

#+begin_src elisp
(use-package vertico
  :init
  (vertico-mode)
  :hook ((rfn-eshadow-update-overlay . #'vertico-directory-tidy)))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-x p b" . consult-project-buffer)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ("M-s d" . consult-find)
         ("M-s g" . consult-ripgrep)))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

I suppose ~which-key~ also counts as a completion menu thing. Honestly it
should built into emacs, I would be so screwed without it.

#+begin_src elisp
(use-package which-key
  :config (which-key-mode 1))
#+end_src

There's also ~company~ and ~yasnippet~, which I've never really gone
without so I honestly couldn't say where normal emacs completion
ends and these two start.

#+begin_src elisp
(use-package company
  :custom
  (company-idle-delay 0.1)
  :bind
  (:map company-active-map
	("C-n" . company-select-next)
	("C-p" . company-select-previous))
  :init
  (global-company-mode))
#+end_src

#+begin_src elisp
(use-package yasnippet
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src

*** Debugging

#+begin_src elisp
(use-package dap-mode
  :after lsp-mode
  :commands dap-debug
  :hook ((python-mode . dap-ui-mode)
	 (python-mode . dap-mode))
  :custom
  (dap-python-debugger 'debugpy)
  :config
  (eval-when-compile
    (require 'cl))
  (require 'dap-python)
  (require 'dap-lldb))
#+end_src

*** Themes

Emacs themes: just skip to the end, discover [[https://protesilaos.com][Protesilaos Stavrou]], and
install the ~ef~ themes. Apparently he's building a hut in the Cyprus
mountains?

#+begin_src elisp
(use-package standard-themes)

(use-package modus-themes)

(use-package ef-themes 
  :init
  (load-theme 'ef-light t))
#+end_src

*** Racket

#+begin_src elisp
(use-package racket-mode)
#+end_src

*** Rust

#+begin_src elisp
(use-package rust-mode
  :hook
  ((rust-mode . eglot-ensure)
   (rust-mode . flycheck-mode))
  :config
  (setq-default eglot-workspace-configuration
                '(:rust-analyzer (:check (:command "clippy")))))
#+end_src

*** Proof general
[[https://existentialtype.wordpress.com/2011/03/27/the-holy-trinity/][The holy trinity.]]

#+begin_src elisp
(use-package proof-general)
#+end_src

*** Lean

#+begin_src elisp
(use-package lean4-mode
  :mode "\\.lean\\'")
#+end_src

*** Haskell

#+begin_src elisp
(use-package haskell-mode
  :hook
  ((haskell-mode . eglot-ensure)))
#+end_src

*** Magit

#+begin_src elisp
(use-package magit)
#+end_src

*** Nix
"Yep! Make a symlink! Youâre an adult!"

#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'")

(use-package envrc
  :config
  (envrc-global-mode))
#+end_src

* Secrets

At this point in my life, I've decided that I don't understand ssh
keys. I've come off Mount Stupid and am in the Valley of Despair. From
this [[https://superuser.com/questions/189355/is-it-ok-to-share-private-key-file-between-multiple-computers-services][stack exchange post]] and other things I've read, my best guess is
that I am *NOT* supposed to have some user key who's private key is
on multiple computers. That would be bad. I should instead have one
key per machine, and there should only be one copy anywhere.

#+begin_src nix :tangle secrets/secrets.nix
let
  kenobi = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBndIK51b/o6aSjuTdoa8emnpCRg0s5y68oXAFR66D4/ jacksontbrough@gmail.com";
  share1 = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFpnGMEUElcwgnuHpBXQa4xotZrRdT6VC/7b9n5TykXZ root@share1";
in
{
  "share1-auth-key1.age".publicKeys = [ kenobi share1 ];
  "webdav-user1.age".publicKeys = [ kenobi share1 ];
  "wireless.age".publicKeys = [ kenobi share1 ];
}
#+end_src

* Templates
:PROPERTIES:
:header-args: :noweb-ref templates
:END:

** Rust
#+begin_src nix
templates.rust = {
  path = ./templates/rust;
  description = "Rust template";
};
#+end_src

** Python
#+begin_src nix
templates.python = {
  path = ./templates/python;
  description = "Python template";
};
#+end_src

** Herbie
[[https://github.com/herbie-fp/herbie]]

#+begin_src nix
templates.herbie = {
  path = ./templates/herbie;
  description = "Herbie template";
};
#+end_src

** Coq
After ~nix flake init~-ing, you'll want to create a ~_CoqProject~
file, containing the line

#+begin_src text :noweb-ref no
-Q . <namespace>
#+end_src

where ~<namespace>~ is the name of whatever is going on with modules
and packages in Coq. Then you'll want to run

#+begin_src shell :noweb-ref no
coq_makefile -f _CoqProject *.v -o Makefile
#+end_src

Then you can ~make~ and ~make clean~. I got this from reading Software
Foundations, specifically from the beginning of the [[https://softwarefoundations.cis.upenn.edu/lf-current/Induction.html][chapter on induction]].

#+begin_src nix
templates.coq = {
  path = ./templates/coq;
  description = "Coq template";
};
#+end_src
* Systems
:PROPERTIES:
:header-args: :noweb-ref systems
:END:

** kenobi

#+begin_src nix
darwinConfigurations.kenobi = nix-darwin.lib.darwinSystem {
  modules = with nixosModules; [
    darwinSystem
    {
      nixpkgs.hostPlatform = "x86_64-darwin";
    }
  ];
};
homeConfigurations."jackson@kenobi" = home-manager.lib.homeManagerConfiguration {
  pkgs = import nixpkgs {
    system = "x86_64-darwin";
    config.allowUnfree = true;
  };
  modules = with nixosModules; [ darwinHome ];
  extraSpecialArgs.nixcasks = nixcasks.legacyPackages."x86_64-darwin";
};
#+end_src

** murph

#+begin_src nix
nixosConfigurations.murph = nixpkgs.lib.nixosSystem {
  modules = with nixosModules; [ murphHardware linuxSystemGraphical ];
};
homeConfigurations."jackson@murph" = home-manager.lib.homeManagerConfiguration {
  pkgs = import nixpkgs {
    system = "x86_64-linux";
    config.allowUnfree = true;
  };
  modules = with nixosModules; [ linuxHomeGraphical ];
};
#+end_src

* Commands
** Running ~home-manager switch~ without Home Manager 
#+begin_src sh
nix run github:broughjt/dotfiles#homeConfigurations.jackson@<machine>.activationPackage
#+end_src
** Raspberry Pi Serial Console
See
[[https://www.jeffgeerling.com/blog/2021/attaching-raspberry-pis-serial-console-uart-debugging]].

#+begin_src shell
screen /dev/tty.usbserial-1420 115200
#+end_src
** Installing nix-darwin from scratch
See [[https://github.com/LnL7/nix-darwin#flakes]].

Step 1 is creating the flake (enabling the proper flags for stupid
reasons nix is experimental):

#+begin_src shell
nix flake --extra-experimental-features nix-command --extra-experimental-features flakes init -t nix-darwin
#+end_src

Then run this command to install nix-darwin:

#+begin_src shell
nix run --extra-experimental-features nix-command --extra-experimental-features flakes nix-darwin -- switch --flake /path/to/flake.nix
#+end_src

** Adding new ssh keys to GitHub

If you need to generate a new one, see
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent.

Then run

#+begin_src shell
pbcopy < ~/.ssh/id_ed25519.pub
#+end_src

but substitute ~id_ed25519~ for the actual name of your public key file.

To test connection,

#+begin_src shell
ssh -T git@github.com
#+end_src
* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
* Footnotes
[fn:1] "No. Suffer my pain"
[fn:2] https://twitter.com/bcantrill/status/1007680560133623808 
